<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python-Flask on zeroy&#39;s blog</title>
    <link>https://zeroy.site/categories/python-flask/</link>
    <description>Recent content in Python-Flask on zeroy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 01 Feb 2022 19:35:39 +0800</lastBuildDate><atom:link href="https://zeroy.site/categories/python-flask/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Flask学习1 TallyApp beta 0.9</title>
      <link>https://zeroy.site/articles/tallyapp1/</link>
      <pubDate>Tue, 01 Feb 2022 19:35:39 +0800</pubDate>
      
      <guid>https://zeroy.site/articles/tallyapp1/</guid>
      <description>功能描述  支持注册和登录 支持简单的分类记账 支持以饼图的形式展现各个分类占总体收支的数目 支持增删改数据 支持以一定的xlsx格式导入导出数据  基本结构 Demo 项目地址
技术路线 后端：python-Flask
前端：BootStrap
踩过的坑  程序开始时数据库需要已经初始化完毕db.create_all() 使用get方法传参会出未知问题，故全部改为使用url传参 浮点误差会让数据很奇怪，注意保留两位小数 不同的数据类型（pandas与string）可能会让数据显示异常（空数据显示为&amp;rsquo;None&#39;）  Docker应用部署细节 Flask本身不带服务器，使用gunicorn来使得web应用能够在服务器上被访问。
使用阿里云作为Docker Hub。
#注册完阿里云的镜像服务之后 #登录 docker login --username={{your username}} registry.cn-hangzhou.aliyuncs.com/ #命名并上传本地docker镜像 docker tag tallyapp registry.cn-hangzhou.aliyuncs.com/tally_app/tallyapp:{{version}} docker push tallyapp registry.cn-hangzhou.aliyuncs.com/tally_app/tallyapp:{{version}} #拉取镜像 docker pull tallyapp registry.cn-hangzhou.aliyuncs.com/tally_app/tallyapp:{{version}} 将本地数据库挂载到Docker容器中，并运行容器。
docker run -d -p 8080:8080 -v /database:/soft/TallyApp/database {{images_id}} </description>
    </item>
    
  </channel>
</rss>
